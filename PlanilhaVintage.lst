Microsoft (R) Macro Assembler Version 12.00.30501.0	    08/22/16 11:41:03
!Planilha-Vintage(FelipeJoseBento			     Page 1 - 1


				TITLE Planilha-Vintage(FelipeJoseBento)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				  
 = 00000008			tamTexto = 8 
				       
				;Criãção de uma Struct, a célula no caso          
 00000017			Cell STRUCT          
 00000000  00				typ BYTE 0h			 				; Tipo da célula, onde 0->Vazia 1 ->Inteiro, 2->String, 3->Formula (De padrão - VAZIA)
 00000001  00000000			numInt DWORD 00000000h				; Um inteiro terá um tamanho máximo de (2^32)/2 , sendo positivo ou negativo
 00000005  00000008 [			text BYTE tamTexto DUP(?),0			; Um título em uma célula ou texto, terá no máximo 8 characteres ASCII
	    00
	   ] 00
 0165EA9E  00000008 [			formula BYTE tamTexto DUP(?),0		; Uma fórmula terá tamanho máximo de 10 characteres ASCII 
	    00
	   ] 00
				Cell ENDS  
				   

 = 00000005			TotalColunas = 5 ; Total de colunas que terá a planilha, sendo (A,B,C,D,E) 
 = 0000000B			TotalLinhas= 11	 ; Total de linha que terá a planilha, sendo de 1 até TotalLinhas 

 00000000			.data   
				;Linhas, onde cada elemento é uma Struct(CELL)
 00000000  00000005 [		Linha1  Cell TotalColunas DUP(<>)   
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 00000073  00000005 [		Linha2  Cell TotalColunas DUP(<>)
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 000000E6  00000005 [		Linha3  Cell TotalColunas DUP(<>)
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 00000159  00000005 [		Linha4  Cell TotalColunas DUP(<>)
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 000001CC  00000005 [		Linha5  Cell TotalColunas DUP(<>)   
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 0000023F  00000005 [		Linha6  Cell TotalColunas DUP(<>) 
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 000002B2  00000005 [		Linha7  Cell TotalColunas DUP(<>)  
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 00000325  00000005 [		Linha8  Cell TotalColunas DUP(<>) 
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 00000398  00000005 [		Linha9  Cell TotalColunas DUP(<>)
	    00 00000000
	    00000008 [
	     00
	    ] 00
	    00000008 [
	     00
	    ] 00
	   ]
 0000040B 50 6C 61 6E 69	menu BYTE "PlanilhaVintage - Menu",0
	   6C 68 61 56 69
	   6E 74 61 67 65
	   20 2D 20 4D 65
	   6E 75 00
 00000422 31 20 2D 20 49	menuOp1 BYTE "1 - INSERIR VALOR OU FORMULA EM UMA CELULA.",0
	   4E 53 45 52 49
	   52 20 56 41 4C
	   4F 52 20 4F 55
	   20 46 4F 52 4D
	   55 4C 41 20 45
	   4D 20 55 4D 41
	   20 43 45 4C 55
	   4C 41 2E 00
 0000044E 32 20 2D 20 44	menuOp2 BYTE "2 - DELETAR VALOR DE UMA UMA CELULA.",0    
	   45 4C 45 54 41
	   52 20 56 41 4C
	   4F 52 20 44 45
	   20 55 4D 41 20
	   55 4D 41 20 43
	   45 4C 55 4C 41
	   2E 00
 00000473 33 20 2D 20 43	menuOp3 BYTE "3 - COPIAR VALOR DE UMA CELULA PARA OUTRA.",0  
	   4F 50 49 41 52
	   20 56 41 4C 4F
	   52 20 44 45 20
	   55 4D 41 20 43
	   45 4C 55 4C 41
	   20 50 41 52 41
	   20 4F 55 54 52
	   41 2E 00
 0000049E 34 20 2D 20 52	menuOp4 BYTE "4 - RECORTAR  VALOR DE UMA CELULA PARA OUTRA.",0 
	   45 43 4F 52 54
	   41 52 20 20 56
	   41 4C 4F 52 20
	   44 45 20 55 4D
	   41 20 43 45 4C
	   55 4C 41 20 50
	   41 52 41 20 4F
	   55 54 52 41 2E
	   00
 000004CC 35 20 2D 20 53	menuOp5 BYTE "5 - SELECIONAR UMA CELULA.", 0 
	   45 4C 45 43 49
	   4F 4E 41 52 20
	   55 4D 41 20 43
	   45 4C 55 4C 41
	   2E 00
 000004E7 36 20 2D 20 46	menuOp6 BYTE "6 - Funcao MAIOR.",0
	   75 6E 63 61 6F
	   20 4D 41 49 4F
	   52 2E 00
 000004F9 37 20 2D 20 46	menuOp7 BYTE "7 - Funcao MENOR.",0 
	   75 6E 63 61 6F
	   20 4D 45 4E 4F
	   52 2E 00
 0000050B 38 20 2D 20 46	menuOp8 BYTE "8 - Funcao CONT.NUM.",0 
	   75 6E 63 61 6F
	   20 43 4F 4E 54
	   2E 4E 55 4D 2E
	   00
 00000520 39 20 2D 20 41	menuOp9 BYTE "9 - Arrastar Formula.",0 
	   72 72 61 73 74
	   61 72 20 46 6F
	   72 6D 75 6C 61
	   2E 00
 00000536 44 69 67 69 74	menuMsg1 BYTE "Digite uma opcao: ",0
	   65 20 75 6D 61
	   20 6F 70 63 61
	   6F 3A 20 00
 00000549 45 6E 74 72 61	menuMsgErro BYTE "Entrada Invalida, por favor digite novamente: ", 0 
	   64 61 20 49 6E
	   76 61 6C 69 64
	   61 2C 20 70 6F
	   72 20 66 61 76
	   6F 72 20 64 69
	   67 69 74 65 20
	   6E 6F 76 61 6D
	   65 6E 74 65 3A
	   20 00
 00000578 44 69 67 69 74	inserirMsg1 BYTE "Digite a coluna no qual deseja inserir: ", 0
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 6E 6F 20 71
	   75 61 6C 20 64
	   65 73 65 6A 61
	   20 69 6E 73 65
	   72 69 72 3A 20
	   00
 000005A1 44 69 67 69 74	inserirMsg2 BYTE "Digite a linha na qual deseja inserir: ", 0 
	   65 20 61 20 6C
	   69 6E 68 61 20
	   6E 61 20 71 75
	   61 6C 20 64 65
	   73 65 6A 61 20
	   69 6E 73 65 72
	   69 72 3A 20 00
 000005C9 44 69 67 69 74	inserirMsg3 BYTE "Digite o tipo de entrada: (1)Int, (2)String, (3)Formula: ", 0
	   65 20 6F 20 74
	   69 70 6F 20 64
	   65 20 65 6E 74
	   72 61 64 61 3A
	   20 28 31 29 49
	   6E 74 2C 20 28
	   32 29 53 74 72
	   69 6E 67 2C 20
	   28 33 29 46 6F
	   72 6D 75 6C 61
	   3A 20 00
 00000603 44 69 67 69 74	inserirMsg5 BYTE "Digite a entrada: ", 0 
	   65 20 61 20 65
	   6E 74 72 61 64
	   61 3A 20 00
 00000616 44 69 67 69 74	inserirMsg6 BYTE "Digite o INTEIRO: ",0   
	   65 20 6F 20 49
	   4E 54 45 49 52
	   4F 3A 20 00
 00000629 44 69 67 69 74	inserirMsg7 BYTE "Digite uma STRING(Maximo 8 digitos): ",0
	   65 20 75 6D 61
	   20 53 54 52 49
	   4E 47 28 4D 61
	   78 69 6D 6F 20
	   38 20 64 69 67
	   69 74 6F 73 29
	   3A 20 00
 0000064F 44 69 67 69 74	inserirMsg8 BYTE "Digite uma FORMULA(Ex: =A4*A5): ",0
	   65 20 75 6D 61
	   20 46 4F 52 4D
	   55 4C 41 28 45
	   78 3A 20 3D 41
	   34 2A 41 35 29
	   3A 20 00
 00000670 44 69 67 69 74	inserirMsg9 BYTE "Digite o intervalo para calcular o MAIOR, (Ex: M=A2:A6): ",0
	   65 20 6F 20 69
	   6E 74 65 72 76
	   61 6C 6F 20 70
	   61 72 61 20 63
	   61 6C 63 75 6C
	   61 72 20 6F 20
	   4D 41 49 4F 52
	   2C 20 28 45 78
	   3A 20 4D 3D 41
	   32 3A 41 36 29
	   3A 20 00
 000006AA 44 69 67 69 74	inserirMsg10 BYTE "Digite o intervalo para calcular o MENOR, (Ex: N=B4:B8): ",0
	   65 20 6F 20 69
	   6E 74 65 72 76
	   61 6C 6F 20 70
	   61 72 61 20 63
	   61 6C 63 75 6C
	   61 72 20 6F 20
	   4D 45 4E 4F 52
	   2C 20 28 45 78
	   3A 20 4E 3D 42
	   34 3A 42 38 29
	   3A 20 00
 000006E4 44 69 67 69 74	inserirMsg11 BYTE "Digite o intervalo para CONT.NUM, (Ex: C=E1:B5): ",0
	   65 20 6F 20 69
	   6E 74 65 72 76
	   61 6C 6F 20 70
	   61 72 61 20 43
	   4F 4E 54 2E 4E
	   55 4D 2C 20 28
	   45 78 3A 20 43
	   3D 45 31 3A 42
	   35 29 3A 20 00
 00000716 44 69 67 69 74	funcaoMsg1	BYTE "Digite o coluna que deseja inserir a funcao: ",0
	   65 20 6F 20 63
	   6F 6C 75 6E 61
	   20 71 75 65 20
	   64 65 73 65 6A
	   61 20 69 6E 73
	   65 72 69 72 20
	   61 20 66 75 6E
	   63 61 6F 3A 20
	   00
 00000744 44 69 67 69 74	funcaoMsg2 BYTE "Digite a linha na qual deseja inserir a funcao: ", 0
	   65 20 61 20 6C
	   69 6E 68 61 20
	   6E 61 20 71 75
	   61 6C 20 64 65
	   73 65 6A 61 20
	   69 6E 73 65 72
	   69 72 20 61 20
	   66 75 6E 63 61
	   6F 3A 20 00
 00000775 44 69 67 69 74	excluirMsg1 BYTE "Digite a coluna da celula que deseja excluir: ", 0
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 64 61 20 63
	   65 6C 75 6C 61
	   20 71 75 65 20
	   64 65 73 65 6A
	   61 20 65 78 63
	   6C 75 69 72 3A
	   20 00
 000007A4 44 69 67 69 74	excluirMsg2 BYTE "Digite a linha da celula que deseja excluir: ",0
	   65 20 61 20 6C
	   69 6E 68 61 20
	   64 61 20 63 65
	   6C 75 6C 61 20
	   71 75 65 20 64
	   65 73 65 6A 61
	   20 65 78 63 6C
	   75 69 72 3A 20
	   00
 000007D2 43 65 6C 75 6C	excluirMsg3 BYTE "Celula excluida com sucesso!", 0   
	   61 20 65 78 63
	   6C 75 69 64 61
	   20 63 6F 6D 20
	   73 75 63 65 73
	   73 6F 21 00
 000007EF 44 69 67 69 74	copiarMsg1	BYTE "Digite a coluna da celula que deseja copiar: ",0    
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 64 61 20 63
	   65 6C 75 6C 61
	   20 71 75 65 20
	   64 65 73 65 6A
	   61 20 63 6F 70
	   69 61 72 3A 20
	   00
 0000081D 44 69 67 69 74	copiarMsg2	BYTE "Digite a linha da celula que deseja copiar: ", 0  
	   65 20 61 20 6C
	   69 6E 68 61 20
	   64 61 20 63 65
	   6C 75 6C 61 20
	   71 75 65 20 64
	   65 73 65 6A 61
	   20 63 6F 70 69
	   61 72 3A 20 00
 0000084A 44 69 67 69 74	copiarMsg3	BYTE "Digite a coluna da celula para onde deseja colar: ",0 
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 64 61 20 63
	   65 6C 75 6C 61
	   20 70 61 72 61
	   20 6F 6E 64 65
	   20 64 65 73 65
	   6A 61 20 63 6F
	   6C 61 72 3A 20
	   00
 0000087D 44 69 67 69 74	copiarMsg4	BYTE "Digite a linha da celula para onde  deseja colar: ", 0
	   65 20 61 20 6C
	   69 6E 68 61 20
	   64 61 20 63 65
	   6C 75 6C 61 20
	   70 61 72 61 20
	   6F 6E 64 65 20
	   20 64 65 73 65
	   6A 61 20 63 6F
	   6C 61 72 3A 20
	   00
 000008B0 44 69 67 69 74	recortarMsg1 BYTE "Digite a coluna da celula que deseja recortar: ",0  
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 64 61 20 63
	   65 6C 75 6C 61
	   20 71 75 65 20
	   64 65 73 65 6A
	   61 20 72 65 63
	   6F 72 74 61 72
	   3A 20 00
 000008E0 44 69 67 69 74	recortarMsg2 BYTE "Digite a linha da celula que deseja recortar: ",0  
	   65 20 61 20 6C
	   69 6E 68 61 20
	   64 61 20 63 65
	   6C 75 6C 61 20
	   71 75 65 20 64
	   65 73 65 6A 61
	   20 72 65 63 6F
	   72 74 61 72 3A
	   20 00
 0000090F 44 69 67 69 74	recortarMsg3 BYTE "Digite a coluna da celula onde deseja colar: ",0 
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 64 61 20 63
	   65 6C 75 6C 61
	   20 6F 6E 64 65
	   20 64 65 73 65
	   6A 61 20 63 6F
	   6C 61 72 3A 20
	   00
 0000093D 44 69 67 69 74	recortarMsg4 BYTE "Digite a linha da celula onde  deseja colar: ", 0
	   65 20 61 20 6C
	   69 6E 68 61 20
	   64 61 20 63 65
	   6C 75 6C 61 20
	   6F 6E 64 65 20
	   20 64 65 73 65
	   6A 61 20 63 6F
	   6C 61 72 3A 20
	   00
 0000096B 44 69 67 69 74	selecionarMsg1 BYTE "Digite a coluna da celula que deseja selecionar: ", 0
	   65 20 61 20 63
	   6F 6C 75 6E 61
	   20 64 61 20 63
	   65 6C 75 6C 61
	   20 71 75 65 20
	   64 65 73 65 6A
	   61 20 73 65 6C
	   65 63 69 6F 6E
	   61 72 3A 20 00
 0000099D 44 69 67 69 74	selecionarMsg2 BYTE "Digite a linha da celula que deseja selecionar: ", 0  
	   65 20 61 20 6C
	   69 6E 68 61 20
	   64 61 20 63 65
	   6C 75 6C 61 20
	   71 75 65 20 64
	   65 73 65 6A 61
	   20 73 65 6C 65
	   63 69 6F 6E 61
	   72 3A 20 00
 000009CE 42 61 72 72 61	selecionarMsg3 BYTE "Barra de formulas: ",0
	   20 64 65 20 66
	   6F 72 6D 75 6C
	   61 73 3A 20 00
				  
 000009E2 00 00000000		areaTransferencia Cell <> ;AREA DE TRANSFERENCIA   
	   00000008 [
	    00
	   ] 00
	   00000008 [
	    00
	   ] 00

 000009F9 00000000		formulaEntrada DWORD ?  
				 
 00000000			.code   
				INCLUDE InterfacePlanilha.asm 
			      C 	;TITLE Planilha-Vintage-Interface(FelipeJoseBento)
			      C ;Arquivos com todas as funçoes relacionadas com a interface com o usuário da Planilha
			      C ;Sendo que essas funçoes são controladas por um controlador
			      C 
 00000000		      C ImprimePlanilha PROC 
			      C 
			      C ; Imprime toda a tabela na Tela para o usuário
			      C ; RECEBE: ESI: Offset endereço da primeira linha da tabela
			      C 
			      C ;Imprimit a planilha toda 
 00000000  BE 00000000 R      C 	mov esi, offset Linha1	; Início da Planilha
 00000005  B9 00000005	      C 	mov ecx, 5				; Numero de Colunas
 0000000A  BA 00000000	      C 	mov edx, 0				; Utilizado em gotoXY
 0000000F  B2 0C	      C 	mov dl, (tamTexto+4)	; Início das Colunas
 00000011  B8 00000000	      C 	mov eax, 0				; Utilizado em WriteChar
 00000016  B0 41	      C 	mov al, 41h				; Charactere "A"
 00000018  E8 00000000 E      C 	call GotoXY 
 0000001D		      C COLUNAS:
 0000001D  E8 00000000 E      C 	call WriteChar			;Imprimir um caractere
 00000022  FE C0	      C 	inc al					;Posicao
 00000024  80 C2 0C	      C 	add dl,(tamTexto+4)		;A Imprimir	
 00000027  E8 00000000 E      C 	call GotoXY				;Mudar Cursor 
 0000002C  E2 EF	      C 	loop COLUNAS			
			      C 
 0000002E  B9 00000009	      C 	mov ecx, 9				; Numero de Colunas
 00000033  BA 00000000	      C 	mov edx, 0				; Utilizado em gotoXY
 00000038  B2 05	      C 	mov dl, 5
 0000003A  B6 01	      C 	mov dh, 1				; Início das Colunas
 0000003C  B8 00000000	      C 	mov eax, 0				; Utilizado em WriteChar
 00000041  B0 01	      C 	mov al, 1h				; Charactere "A"
 00000043  E8 00000000 E      C 	call GotoXY 
 00000048		      C LINHA:						;Agora colocando cabeçalhos nas linhas
 00000048  E8 00000000 E      C 	call WriteDec
 0000004D  FE C0	      C 	inc al
 0000004F  80 C6 02	      C 	add dh, 2
 00000052  E8 00000000 E      C 	call GotoXY 
 00000057  E2 EF	      C 	loop LINHA
			      C 
			      C 	;;PRENCHENDO VALORES (Buscando da memória)
			      C 	;;O preenchemento é feito por linhas, coluna a coluna
			      C 
 00000059  BE 00000000 R      C 	mov esi, OFFSET Linha1
 0000005E  B9 00000009	      C 	mov ecx, 9
 00000063  BA 00000000	      C 	mov edx, 0
 00000068  B6 01	      C 	mov dh, 1
 0000006A		      C PLINHA:	
 0000006A  8B D9	      C 	mov ebx, ecx
 0000006C  B9 00000005	      C 	mov ecx, 5
 00000071  B2 08	      C 	mov dl, (tamTexto)
 00000073		      C PCOLUNA:
			      C 	;EDX está com a POSICAO
			      C 	;ESI está com a célula
			      C 	;Chmando ImprimeCélula
 00000073  E8 00000010	      C 	call ImprimeCelula
			      C 
 00000078  80 C2 0C	      C 	add dl,(tamTexto+4)		;Nova posição da coluna
 0000007B  83 C6 17	      C 	add esi, TYPE CELL		;Novo endereco da célula
 0000007E  E2 F3	      C 	loop PCOLUNA			;Preencher nova coluna
 00000080  80 C6 02	      C 	add dh, 2				;Nova posica da linha
 00000083  8B CB	      C 	mov ecx, ebx			;Retornando contador
 00000085  E2 E3	      C 	loop PLINHA 
			      C 	
			      C 
 00000087  C3		      C 	ret	;Retorna ao arquivo principal
			      C 
 00000088		      C ImprimePlanilha ENDP
			      C 
 00000088		      C ImprimeCelula PROC 
			      C 
			      C ; Procedimento que imprime uma celula na tela 
			      C ; Recebe a posicao em EDX 
			      C ; Recebe o endereco da célula em ESI
			      C ; Utiliza o ecx, sem perder o valor que estava
 00000088  57		      C 	push edi
 00000089  50		      C 	push eax
 0000008A  51		      C 	push ecx
			      C 
 0000008B  E8 00000000 E      C 	call GoToXY
			      C 
 00000090  8D 3E	      C 	lea edi, (Cell  PTR[esi]).typ
 00000092  B0 00	      C 	mov al,0
 00000094  38 07	      C 	cmp [edi], al
 00000096  74 12	      C 	je CELLVAZIA
 00000098  FE C0	      C 	inc al
 0000009A  38 07	      C 	cmp [edi], al
 0000009C  74 21	      C 	je CELLINT
 0000009E  FE C0	      C 	inc al
 000000A0  38 07	      C 	cmp [edi], al
 000000A2  74 27	      C 	je CELLTEXT
 000000A4  FE C0	      C 	inc al
 000000A6  38 07	      C 	cmp [edi], al
 000000A8  74 42	      C 	je CELLFORMULA
			      C 
 000000AA		      C CELLVAZIA:
 000000AA  B9 00000008	      C 	mov ecx, tamTexto
 000000AF  B8 00000000	      C 	mov eax, 0
 000000B4  B0 2D	      C 	mov al, "-"
 000000B6		      C CVaux:
 000000B6  E8 00000000 E      C 	call WriteChar
 000000BB  E2 F9	      C 	loop CVaux
 000000BD  EB 40	      C 	jmp FIMIC
			      C 
 000000BF		      C CELLINT:
 000000BF  8D 7E 01	      C 	lea edi, (Cell  PTR[esi]).numInt
 000000C2  8B 07	      C 	mov eax, [edi]
 000000C4  E8 00000000 E      C 	call WriteInt
 000000C9  EB 34	      C 	jmp FIMIC
			      C 
 000000CB		      C CELLTEXT:
 000000CB  8D 7E 05	      C 	lea edi, (Cell  PTR[esi]).text
 000000CE  52		      C 	push edx
 000000CF  8B D7	      C 	mov edx, edi
 000000D1  E8 00000000 E      C 	call StrLength	;Returna o numero de characteres não nulos
 000000D6  5A		      C 	pop edx
 000000D7  8B C8	      C 	mov ecx, eax
 000000D9  57		      C 	push edi
 000000DA		      C CTaux:
 000000DA  B8 00000000	      C 	mov eax, 0
 000000DF  8A 07	      C 	mov al, [edi]
 000000E1  E8 00000000 E      C 	call WriteChar
 000000E6  47		      C 	inc edi
 000000E7  E2 F1	      C 	loop CTaux
 000000E9  5F		      C 	pop edi
 000000EA  EB 13	      C 	jmp FIMIC
			      C 
 000000EC		      C CELLFORMULA:
			      C 	;Formula digitada pelo usuário
			      C 	;Aqui imprime apenas o resultado que está na formula
 000000EC  57		      C 	push edi
 000000ED  8B FE	      C 	mov edi, esi
 000000EF  E8 0000072F	      C 	call controladorFormula
 000000F4  5F		      C 	pop edi
 000000F5  8D 7E 01	      C 	lea edi, (Cell  PTR[esi]).numInt
 000000F8  8B 07	      C 	mov eax, [edi]
 000000FA  E8 00000000 E      C 	call WriteInt
			      C 
 000000FF		      C FIMIC:
 000000FF  59		      C 	pop ecx
 00000100  58		      C 	pop eax
 00000101  5F		      C 	pop edi
 00000102  C3		      C 	ret 
 00000103		      C ImprimeCelula ENDP
			      C 
 00000103		      C CentralizaCelula PROC
			      C ; Função que altera a posição na tela, deixando o valor
			      C ; da célula centralizado sem alterar o valor de nenhum registrador
			      C ; Recebe a posição do inicio da célula em EDX 
			      C ; Recebe a posicao do valor a ser centralizado em EDI
			      C ; Retorna em EAX o numero de dígitos que a célula tem
			      C 
 00000103  52		      C 	push edx
 00000104  57		      C 	push edi
 00000105  53		      C 	push ebx
 00000106  51		      C 	push ecx
			      C 
 00000107  B8 00000000	      C 	mov eax, 0
 0000010C  BB 00000000	      C 	mov ebx, 0
			      C 	
 00000111		      C CentralizaCelula ENDP
			      C 
 00000111		      C ImprimeMenu PROC
			      C  ; Função que imprime o menu com as funcionalidades presentes na planilha
			      C  ; RETORNA: a opção escolhida em EAX
			      C  ; Opçoes do Menu
			      C  ; 1 - INSERIR VALOR EM UMA CELULA
			      C  ; 2 - DELETAR VALOR DE UMA UMA CELULA 
			      C  ; 3 - COPIAR VALOR DE UMA CÉLULA PARA OUTRA 
			      C  ; 4 - RECORTAR VALOR DE UMA CÉLULA PARA OUTRA 
			      C  ; 5 - DELETAR UMA COLUNA 
			      C  ; 6 - DELETAR UMA LINHA
			      C  ; 7 - FUNÇÃO MODO
			      C  ; 8 - Cont.NUM
			      C  ; 9 - FUNÇÃO MAIOR
			      C 
 00000111  E8 00000000 E      C 	call Crlf
 00000116  E8 00000000 E      C 	call Crlf
 0000011B  52		      C 	push edx
			      C 
			      C 	; Imprimindo o MENU
			      C 	; Com as opçoes 
			      C 
			      C 	;menu BYTE "PlanilhaVintage - Menu",0
 0000011C  BA 0000040B R      C 	mov edx, OFFSET menu
 00000121  E8 00000000 E      C 	call WriteString
 00000126  E8 00000000 E      C 	call Crlf
			      C 	
			      C 	;menuOp1 BYTE "1 - INSERIR VALOR OU FORMULA EM UMA CELULA.",0
 0000012B  BA 00000422 R      C 	mov edx, OFFSET menuOp1
 00000130  E8 00000000 E      C 	call WriteString
 00000135  E8 00000000 E      C 	call Crlf
			      C 	
			      C 	;menuOp2 BYTE "2 - DELETAR VALOR DE UMA UMA CELULA.",0 
 0000013A  BA 0000044E R      C 	mov edx, OFFSET menuOp2
 0000013F  E8 00000000 E      C 	call WriteString
 00000144  E8 00000000 E      C 	call Crlf
			      C 	
			      C 	;menuOp3 BYTE "3 - COPIAR VALOR DE UMA CELULA PARA OUTRA.",0 
 00000149  BA 00000473 R      C 	mov edx, OFFSET menuOp3
 0000014E  E8 00000000 E      C 	call WriteString
 00000153  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;menuOp4 BYTE "4 - RECORTAR VALOR DE UMA CELULA PARA OUTRA.",0 
 00000158  BA 0000049E R      C 	mov edx, OFFSET menuOp4
 0000015D  E8 00000000 E      C 	call WriteString
 00000162  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;menuOp5 BYTE "5 - SELECIONAR UMA CELULA.", 0
 00000167  BA 000004CC R      C 	mov edx, OFFSET menuOp5
 0000016C  E8 00000000 E      C 	call WriteString
 00000171  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;menuOp5 BYTE "6 - FUNCAO MAIOR.",0
 00000176  BA 000004E7 R      C 	mov edx, OFFSET menuOp6
 0000017B  E8 00000000 E      C 	call WriteString
 00000180  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;menuOp6 BYTE "7 - FUNCAO MENOr.",0  
 00000185  BA 000004F9 R      C 	mov edx, OFFSET menuOp7
 0000018A  E8 00000000 E      C 	call WriteString
 0000018F  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;menuOp6 BYTE "8 - FUNCAO CONT.NUM.",0  
 00000194  BA 0000050B R      C 	mov edx, OFFSET menuOp8
 00000199  E8 00000000 E      C 	call WriteString
 0000019E  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;menuOp6 BYTE "7 - COPIAR FORMULA .",0  
 000001A3  BA 00000520 R      C 	mov edx, OFFSET menuOp9
 000001A8  E8 00000000 E      C 	call WriteString
 000001AD  E8 00000000 E      C 	call Crlf
			      C 	
			      C 	;menuMsg1 BYTE "Digite uma opcao: ",0
 000001B2  BA 00000536 R      C 	mov edx, OFFSET menuMsg1
 000001B7  E8 00000000 E      C 	call WriteString 
			      C 	
			      C 	;Recendo uma entrada do usuário
			      C 	;Tratando possiveis entradas invalidas
			      C 
 000001BC		      C LeituraOpMenu:  
 000001BC  E8 00000000 E      C 	call ReadInt
 000001C1  70 32	      C     jo  EntradaInvalida
 000001C3  53		      C 	push ebx
 000001C4  BB 00000001	      C 	mov ebx, 1
			      C 
 000001C9  3B C3	      C 	cmp eax, ebx
 000001CB  74 34	      C 	je EntradaValida
 000001CD  43		      C 	inc ebx
			      C 	
 000001CE  3B C3	      C 	cmp eax, ebx
 000001D0  74 2F	      C 	je EntradaValida
 000001D2  43		      C 	inc ebx
			      C 
 000001D3  3B C3	      C 	cmp eax, ebx
 000001D5  74 2A	      C 	je EntradaValida
 000001D7  43		      C 	inc ebx
			      C 
 000001D8  3B C3	      C 	cmp eax, ebx
 000001DA  74 25	      C 	je EntradaValida
 000001DC  43		      C 	inc ebx
			      C 
 000001DD  3B C3	      C 	cmp eax, ebx
 000001DF  74 20	      C 	je EntradaValida
 000001E1  43		      C 	inc ebx
			      C 
 000001E2  3B C3	      C 	cmp eax, ebx
 000001E4  74 1B	      C 	je EntradaValida
 000001E6  43		      C 	inc ebx
			      C 
 000001E7  3B C3	      C 	cmp eax, ebx
 000001E9  74 16	      C 	je EntradaValida
 000001EB  43		      C 	inc ebx
			      C 
 000001EC  3B C3	      C 	cmp eax, ebx
 000001EE  74 11	      C 	je EntradaValida
 000001F0  43		      C 	inc ebx
			      C 
 000001F1  3B C3	      C 	cmp eax, ebx
 000001F3  74 0C	      C 	je EntradaValida
			      C 
 000001F5		      C EntradaInvalida:
 000001F5  BA 00000549 R      C     mov  edx,OFFSET menuMsgErro
 000001FA  E8 00000000 E      C     call WriteString
 000001FF  EB BB	      C     jmp  LeituraOpMenu
			      C 
 00000201		      C EntradaValida:
 00000201  5B		      C 	pop ebx
 00000202  5A		      C 	pop edx
 00000203  C3		      C 	ret
 00000204		      C ImprimeMenu ENDP
			      C 
 00000204		      C MenorUser PROC
			      C 
			      C 	;Procedimento com o intuito de passar os parametros 
			      C 	;para a funcao Modo
			      C 	;Quando o usuario digita o intervalo
			      C 
 00000204  60		      C 	pushad
 00000205  BE 00000000 R      C 	mov esi, OFFSET Linha1
 0000020A  B8 00000000	      C 	mov eax,0
			      C 	
			      C 	;funcaoMsg1 BYTE "Digite a coluna no qual deseja inserir a funcao: ", 0
 0000020F  BA 00000716 R      C 	mov edx, OFFSET funcaoMsg1
 00000214  E8 00000000 E      C 	call WriteString
 00000219  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 0000021E  50		      C 	push eax		 ; Posição da Coluna na Pilha
			      C 
			      C 	;funcaoMsg2 BYTE "Digite a linha na qual deseja inserir a funca: ", 0
 0000021F  BA 00000744 R      C 	mov edx, OFFSET funcaoMsg2
 00000224  E8 00000000 E      C 	call WriteString
 00000229  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 	
 0000022E  50		      C 	push eax		 ;Posição da Linha na Pilha
			      C 
			      C 	;Preenchendo célula Aux com os dados do usuário
			      C 	;Utilizando o tipo de entrada preencher a célula
 0000022F  BF 000009E2 R      C 	mov edi, OFFSET areaTransferencia
			      C 	
			      C 	;inserirMsg10 BYTE "Digite o intervalo para calcular o MENOR, (Ex: M=B4:B8): ",0
 00000234  BA 000006AA R      C 	mov edx, OFFSET inserirMsg10
 00000239  E8 00000000 E      C 	call WriteString
			      C 	
			      C 	;Inserindo Formula
 0000023E  C6 07 03	      C 	mov (Cell  PTR[edi]).typ, 3
 00000241  8D 57 0E	      C 	lea edx, (Cell  PTR[edi]).formula		; EDX endereço de onde sera salvo
 00000244  B9 00000008	      C 	mov ecx, tamTexto						; Tamanho máximo digitado
 00000249  E8 00000000 E      C 	call ReadString							; Salvando direto na memoria
			      C 
			      C 	;Recuperando a posição da linha e da coluna
 0000024E  58		      C 	pop eax		;Linha
 0000024F  5B		      C 	pop ebx		;Coluna
			      C 
			      C 	;CHAMANDO A FUNCAO INSERE 
 00000250  E8 000003B2	      C 	call EnderecoCelula
 00000255  E8 00000359	      C 	call InserirCelula
			      C 
			      C 	;Receuperando valores originais dos registradores
 0000025A  61		      C 	popad
			      C 
 0000025B  C3		      C 	ret
			      C 
 0000025C		      C MenorUser ENDP
			      C 
 0000025C		      C MaiorUser PROC
			      C 	;Procedimento com o intuito de passar os parametros 
			      C 	;para a funcao Modo
			      C 	;Quando o usuario digita o intervalo
			      C 
 0000025C  60		      C 	pushad
 0000025D  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000262  B8 00000000	      C 	mov eax,0
			      C 	
			      C 	;funcaoMsg1 BYTE "Digite a coluna no qual deseja inserir: ", 0
 00000267  BA 00000716 R      C 	mov edx, OFFSET funcaoMsg1
 0000026C  E8 00000000 E      C 	call WriteString
 00000271  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 00000276  50		      C 	push eax		 ; Posição da Coluna na Pilha
			      C 
			      C 	;funcaoMsg2 BYTE "Digite a linha na qual deseja inserir: ", 0
 00000277  BA 00000744 R      C 	mov edx, OFFSET funcaoMsg2
 0000027C  E8 00000000 E      C 	call WriteString
 00000281  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 	
 00000286  50		      C 	push eax		 ;Posição da Linha na Pilha
			      C 
			      C 	;Preenchendo célula Aux com os dados do usuário
			      C 	;Utilizando o tipo de entrada preencher a célula
 00000287  BF 000009E2 R      C 	mov edi, OFFSET areaTransferencia
			      C 	
			      C 	;inserirMsg9 BYTE "Digite o intervalo para calcular o MODO "Ex: =MODO(A2:A4)": ",0
 0000028C  BA 00000670 R      C 	mov edx, OFFSET inserirMsg9
 00000291  E8 00000000 E      C 	call WriteString
			      C 	
			      C 	;Inserindo Formula
 00000296  C6 07 03	      C 	mov (Cell  PTR[edi]).typ, 3
 00000299  8D 57 0E	      C 	lea edx, (Cell  PTR[edi]).formula		; EDX endereço de onde sera salvo
 0000029C  B9 00000008	      C 	mov ecx, tamTexto						; Tamanho máximo digitado
 000002A1  E8 00000000 E      C 	call ReadString							; Salvando direto na memoria
			      C 
			      C 	;Recuperando a posição da linha e da coluna
 000002A6  58		      C 	pop eax		;Linha
 000002A7  5B		      C 	pop ebx		;Coluna
			      C 
			      C 	;CHAMANDO A FUNCAO INSERE 
 000002A8  E8 0000035A	      C 	call EnderecoCelula
 000002AD  E8 00000301	      C 	call InserirCelula
			      C 
			      C 	;Receuperando valores originais dos registradores
 000002B2  61		      C 	popad
			      C 
 000002B3  C3		      C 	ret
			      C 
 000002B4		      C MaiorUser ENDP
			      C 
 000002B4		      C ContNumUser PROC
			      C 
			      C 	;Essa formula tem como objetivo contar o número de células que estão preenchidas em um determinado intervalo de uma coluna.
			      C 	
 000002B4  60		      C 	pushad
 000002B5  BE 00000000 R      C 	mov esi, OFFSET Linha1
 000002BA  B8 00000000	      C 	mov eax,0
			      C 	
			      C 	;funcaoMsg1 BYTE "Digite a coluna no qual deseja inserir a funcao: ", 0
 000002BF  BA 00000716 R      C 	mov edx, OFFSET funcaoMsg1
 000002C4  E8 00000000 E      C 	call WriteString
 000002C9  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 000002CE  50		      C 	push eax		 ; Posição da Coluna na Pilha
			      C 
			      C 	;funcaoMsg2 BYTE "Digite a linha na qual deseja inserir a funcao: ", 0
 000002CF  BA 00000744 R      C 	mov edx, OFFSET funcaoMsg2
 000002D4  E8 00000000 E      C 	call WriteString
 000002D9  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 	
 000002DE  50		      C 	push eax		 ;Posição da Linha na Pilha
			      C 
			      C 	;Preenchendo célula Aux com os dados do usuário
			      C 	;Utilizando o tipo de entrada preencher a célula
 000002DF  BF 000009E2 R      C 	mov edi, OFFSET areaTransferencia
			      C 	
			      C 	;inserirMsg11 BYTE "Digite o intervalo para CONT.NUM, (Ex: C=E1:B5): ",0
 000002E4  BA 000006E4 R      C 	mov edx, OFFSET inserirMsg11
 000002E9  E8 00000000 E      C 	call WriteString
			      C 	
			      C 	;Inserindo Formula
 000002EE  C6 07 03	      C 	mov (Cell  PTR[edi]).typ, 3
 000002F1  8D 57 0E	      C 	lea edx, (Cell  PTR[edi]).formula		; EDX endereço de onde sera salvo
 000002F4  B9 00000008	      C 	mov ecx, tamTexto						; Tamanho máximo digitado
 000002F9  E8 00000000 E      C 	call ReadString							; Salvando direto na memoria
			      C 
			      C 	;Recuperando a posição da linha e da coluna
 000002FE  58		      C 	pop eax		;Linha
 000002FF  5B		      C 	pop ebx		;Coluna
			      C 
			      C 	;CHAMANDO A FUNCAO INSERE 
 00000300  E8 00000302	      C 	call EnderecoCelula
 00000305  E8 000002A9	      C 	call InserirCelula
			      C 
			      C 	;Receuperando valores originais dos registradores
 0000030A  61		      C 	popad
			      C 
 0000030B  C3		      C 	ret
			      C 
 0000030C		      C ContNumUser ENDP
			      C 
 0000030C		      C InserirUser PROC
			      C 	;Função com o intuito de passar os parametros 
			      C 	;para a funcao InserirCelula
			      C 	;Quando o usuário digita os valores
			      C 	;RECEBE: ESI com o inicio da Tabela 
			      C 	;No caso a linha e a coluna a se inserir
			      C 	;quando o usuário digita esses valores
 0000030C  50		      C 	push eax
 0000030D  52		      C 	push edx
 0000030E  57		      C 	push edi
 0000030F  53		      C 	push ebx
 00000310  51		      C 	push ecx
 00000311  56		      C 	push esi
			      C 
 00000312  B8 00000000	      C 	mov eax,0
			      C 
			      C 	;inserirMsg1 BYTE "Digite a coluna no qual deseja inserir: ", 0
			      C 
 00000317  BA 00000578 R      C 	mov edx, OFFSET inserirMsg1
 0000031C  E8 00000000 E      C 	call WriteString
 00000321  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 00000326  50		      C 	push eax		 ; Posição da Coluna na Pilha
			      C 
			      C 	;inserirMsg2 BYTE "Digite a linha na qual deseja inserir: ", 0
			      C 
 00000327  BA 000005A1 R      C 	mov edx, OFFSET inserirMsg2
 0000032C  E8 00000000 E      C 	call WriteString
 00000331  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 	
 00000336  50		      C 	push eax		 ;Posição da Linha na Pilha
			      C 
			      C 	;inserirMsg3 BYTE "Digite o tipo de entrada: (1)Int, (2)String, (3)Formula: ", 0
			      C 
 00000337  BA 000005C9 R      C 	mov edx, OFFSET inserirMsg3
 0000033C  E8 00000000 E      C 	call WriteString
 00000341  E8 00000000 E      C 	call ReadHex	 ;EAX = Tipo de Entrada
			      C 
			      C 	;Preenchendo célula Aux com os dados do usuário
			      C 	;Utilizando o tipo de entrada preencher a célula
 00000346  BF 000009E2 R      C 	mov edi, OFFSET areaTransferencia
			      C 	
 0000034B  BB 00000001	      C 	mov ebx, 1
 00000350  3B D8	      C 	cmp ebx, eax
 00000352  74 12	      C 	je InsereUserInt
 00000354  BB 00000002	      C 	mov ebx, 2
 00000359  3B D8	      C 	cmp ebx, eax
 0000035B  74 22	      C 	je InsereUserString
 0000035D  BB 00000003	      C 	mov ebx, 3
 00000362  3B D8	      C 	cmp ebx, eax
 00000364  74 35	      C 	je InsereUserFormula
			      C 
 00000366		      C InsereUserInt: 
			      C 	;inserirMsg6 BYTE "Digite o INTEIRO: ",0
 00000366  BA 00000616 R      C 	mov edx, OFFSET inserirMsg6
 0000036B  E8 00000000 E      C 	call WriteString
 00000370  E8 00000000 E      C 	call ReadInt	 ;EAX = ENTRADA
 00000375  89 47 01	      C 	mov (Cell  PTR[edi]).numInt, eax
 00000378  C6 07 01	      C 	mov (Cell  PTR[edi]).typ, 1
 0000037B  8B C8	      C 	mov ecx, eax	 ;ECX = ENTRADA
			      C 
 0000037D  EB 3D	      C 	jmp FimUserInsere
			      C 
 0000037F		      C InsereUserString:
			      C 	;inserirMsg7 BYTE "Digite uma STRING(Maximo 8 digitos): ",0
 0000037F  BA 00000629 R      C 	mov edx, OFFSET inserirMsg7
 00000384  E8 00000000 E      C 	call WriteString
			      C 	
			      C 	;Inserindo String
 00000389  C6 07 02	      C 	mov (Cell  PTR[edi]).typ, 2
 0000038C  8D 57 05	      C 	lea edx, (Cell  PTR[edi]).text ; EDX endereço de onde sera salvo
 0000038F  B9 00000008	      C 	mov ecx, tamTexto			   ; Tamanho máximo digitado
 00000394  E8 00000000 E      C 	call ReadString				   ; Salvando direto na memoria	
 00000399  EB 21	      C 	jmp FimUserInsere
			      C 
 0000039B		      C InsereUserFormula:
			      C 	;inserirMsg8 BYTE "Digite uma FORMULA(Ex: =A4*A5): ",0
 0000039B  BA 0000064F R      C 	mov edx, OFFSET inserirMsg8
 000003A0  E8 00000000 E      C 	call WriteString
			      C 	
			      C 	;Inserindo Formula
 000003A5  C6 07 03	      C 	mov (Cell  PTR[edi]).typ, 3
 000003A8  8D 57 0E	      C 	lea edx, (Cell  PTR[edi]).formula		; EDX endereço de onde sera salvo
 000003AB  B9 00000008	      C 	mov ecx, tamTexto						; Tamanho máximo digitado
 000003B0  E8 00000000 E      C 	call ReadString							; Salvando direto na memoria
			      C 	
 000003B5  E8 00000469	      C 	call controladorFormula	
			      C 	
 000003BA  EB 00	      C 	jmp FimUserInsere
			      C 
 000003BC		      C FimUserInsere:
			      C 	;Recuperando a posição da linha e da coluna
 000003BC  58		      C 	pop eax		;Linha
 000003BD  5B		      C 	pop ebx		;Coluna
			      C 
			      C 	;CHAMANDO A FUNCAO INSERE 
 000003BE  E8 00000244	      C 	call EnderecoCelula
 000003C3  E8 000001EB	      C 	call InserirCelula
			      C 
			      C 	;Receuperando valores originais dos registradores
 000003C8  5E		      C 	pop esi
 000003C9  59		      C 	pop ecx
 000003CA  5B		      C 	pop ebx
 000003CB  5F		      C 	pop edi
 000003CC  5A		      C 	pop edx
 000003CD  58		      C 	pop eax
			      C 
 000003CE  C3		      C 	ret
			      C 
 000003CF		      C InserirUser ENDP
			      C 
 000003CF		      C ExcluirUser PROC
			      C 	;Função com o intuito de passar os parametros 
			      C 	;para a funcao excluir
			      C 	;RECEBE: ESI com o inicio da Tabela
			      C 	;No caso a linha e a coluna a se excluir
			      C 	;quando o usuário digita esses valores
			      C 
 000003CF  52		      C 	push edx
 000003D0  50		      C 	push eax
 000003D1  53		      C 	push ebx
			      C 	;Recebendo os valores do usuário
			      C 
 000003D2  BA 00000775 R      C 	mov edx, OFFSET excluirMsg1
 000003D7  E8 00000000 E      C 	call WriteString
 000003DC  E8 00000000 E      C 	call ReadHex	;EAX = COLUNA
 000003E1  50		      C 	push eax		;Coluna na pilha
			      C 
 000003E2  BA 000007A4 R      C 	mov edx, OFFSET excluirMsg2
 000003E7  E8 00000000 E      C 	call WriteString
 000003EC  E8 00000000 E      C 	call ReadHex	;EAX = Linha
 000003F1  50		      C 	push eax		;Linha na PILHA
			      C 
 000003F2  58		      C 	pop eax
 000003F3  5B		      C 	pop ebx
			      C 	
 000003F4  56		      C 	push esi
 000003F5  E8 0000020D	      C 	call EnderecoCelula
 000003FA  E8 00000244	      C 	call ExcluirCelula
 000003FF  5E		      C 	pop esi
			      C 
			      C 	;Recuperando valores iniciais 
			      C 
 00000400  5B		      C 	pop ebx
 00000401  58		      C 	pop eax
 00000402  5A		      C 	pop edx
			      C 
 00000403  C3		      C 	ret
			      C 
 00000404		      C ExcluirUser ENDP
			      C 
 00000404		      C CopiarUser PROC
			      C 	;Procedimento que executa a funcionalida(Copiar/Colar) com o usuario
			      C 	;Solicita a Celula a ser copiada
			      C 	;Solicita o destino a ser colado
			      C 	;Executa a ação Copiar/Colar
 00000404  56		      C 	push esi
 00000405  50		      C 	push eax
 00000406  52		      C 	push edx
 00000407  53		      C 	push ebx
			      C 
 00000408  B8 00000000	      C 	mov eax,0
			      C 
			      C 	;copiarMsg1	BYTE "Digite a coluna da celula que deseja copiar: ",0
			      C 
 0000040D  BA 000007EF R      C 	mov edx, OFFSET copiarMsg1
 00000412  E8 00000000 E      C 	call WriteString
 00000417  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 0000041C  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;copiarMsg2	BYTE "Digite a linha da celula que deseja copiar: ", 0
			      C 
 0000041E  BA 0000081D R      C 	mov edx, OFFSET copiarMsg2
 00000423  E8 00000000 E      C 	call WriteString
 00000428  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
 0000042D  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000432  E8 000001D0	      C 	call EnderecoCelula
 00000437  E8 0000024E	      C 	call CopiarCelula
			      C 
			      C 	;copiarMsg3	BYTE "Digite a coluna da celula para onde deseja colar: ",0
			      C 
 0000043C  BA 0000084A R      C 	mov edx, OFFSET copiarMsg3
 00000441  E8 00000000 E      C 	call WriteString
 00000446  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 0000044B  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;copiarMsg4	BYTE "Digite a linha da celula para onde  deseja colar: ", 0
			      C 
 0000044D  BA 0000087D R      C 	mov edx, OFFSET copiarMsg4
 00000452  E8 00000000 E      C 	call WriteString
 00000457  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
 0000045C  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000461  E8 000001A1	      C 	call EnderecoCelula
 00000466  E8 00000234	      C 	call ColarCelula
			      C 
			      C 	;Recuperando Registradores
 0000046B  5B		      C 	pop ebx
 0000046C  5A		      C 	pop edx
 0000046D  58		      C 	pop eax
 0000046E  5E		      C 	pop esi
			      C 
 0000046F  C3		      C 	ret
 00000470		      C CopiarUser ENDP
			      C 
 00000470		      C CopiaFormulaUser PROC
			      C 	;Procedimento que executa a funcionalida(Copiar/Colar) com o usuario
			      C 	;Solicita a Celula a ser copiada
			      C 	;Solicita o destino a ser colado
			      C 	;Executa a ação Copiar/Colar
 00000470  56		      C 	push esi
 00000471  50		      C 	push eax
 00000472  52		      C 	push edx
 00000473  53		      C 	push ebx
			      C 
 00000474  B8 00000000	      C 	mov eax,0
			      C 
			      C 	;copiarMsg1	BYTE "Digite a coluna da celula que deseja copiar: ",0
			      C 
 00000479  BA 000007EF R      C 	mov edx, OFFSET copiarMsg1
 0000047E  E8 00000000 E      C 	call WriteString
 00000483  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 00000488  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;copiarMsg2	BYTE "Digite a linha da celula que deseja copiar: ", 0
			      C 
 0000048A  BA 0000081D R      C 	mov edx, OFFSET copiarMsg2
 0000048F  E8 00000000 E      C 	call WriteString
 00000494  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
 00000499  BE 00000000 R      C 	mov esi, OFFSET Linha1
 0000049E  E8 00000164	      C 	call EnderecoCelula
 000004A3  E8 000001E2	      C 	call CopiarCelula
			      C 
			      C 	;copiarMsg3	BYTE "Digite a coluna da celula para onde deseja colar: ",0
			      C 
 000004A8  BA 0000084A R      C 	mov edx, OFFSET copiarMsg3
 000004AD  E8 00000000 E      C 	call WriteString
 000004B2  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 000004B7  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;copiarMsg4	BYTE "Digite a linha da celula para onde  deseja colar: ", 0
			      C 
 000004B9  BA 0000087D R      C 	mov edx, OFFSET copiarMsg4
 000004BE  E8 00000000 E      C 	call WriteString
 000004C3  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
			      C 	;VAMOS MODIFICAR A COLUNA
 000004C8  52		      C 	push edx
 000004C9  53		      C 	push ebx
 000004CA  57		      C 	push edi
 000004CB  80 C3 37	      C 	add bl, 37h
 000004CE  BF 000009E2 R      C 	mov edi, OFFSET areaTransferencia
 000004D3  8D 57 0E	      C 	lea edx,(CELL PTR[edi]).formula
 000004D6  88 5A 01	      C 	mov [edx+1], bl
 000004D9  88 5A 04	      C 	mov [edx+4], bl
 000004DC  5F		      C 	pop edi
 000004DD  5B		      C 	pop ebx
 000004DE  5A		      C 	pop edx
			      C 
 000004DF  BE 00000000 R      C 	mov esi, OFFSET Linha1
 000004E4  E8 0000011E	      C 	call EnderecoCelula
 000004E9  E8 000001B1	      C 	call ColarCelula
			      C 
			      C 	;Recuperando Registradores
 000004EE  5B		      C 	pop ebx
 000004EF  5A		      C 	pop edx
 000004F0  58		      C 	pop eax
 000004F1  5E		      C 	pop esi
			      C 
 000004F2  C3		      C 	ret
 000004F3		      C CopiaFormulaUser ENDP
			      C 
 000004F3		      C RecortarUser PROC
			      C 	;Procedimento que executa a funcionalida(Recortar/Colar) com o usuario
			      C 	;Solicita a Celula a ser recortado
			      C 	;Solicita o destino a ser colado
			      C 	;Executa a ação Recortar/Colar
			      C 
 000004F3  56		      C 	push esi
 000004F4  50		      C 	push eax
 000004F5  52		      C 	push edx
 000004F6  53		      C 	push ebx
			      C 
 000004F7  B8 00000000	      C 	mov eax,0
			      C 
			      C 	;recortarMsg1 BYTE "Digite a coluna da celula que deseja recortar: ",0
			      C 
 000004FC  BA 000008B0 R      C 	mov edx, OFFSET recortarMsg1
 00000501  E8 00000000 E      C 	call WriteString
 00000506  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 0000050B  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;recortarMsg2 BYTE "Digite a linha da celula que deseja recortar: ",0
			      C 
 0000050D  BA 000008E0 R      C 	mov edx, OFFSET recortarMsg2
 00000512  E8 00000000 E      C 	call WriteString
 00000517  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
 0000051C  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000521  E8 000000E1	      C 	call EnderecoCelula
 00000526  E8 0000015F	      C 	call CopiarCelula
 0000052B  E8 00000113	      C 	call ExcluirCelula
			      C 	
			      C 	;recortarMsg3 BYTE "Digite a coluna da celula onde deseja colar: ",0
 00000530  BA 0000090F R      C 	mov edx, OFFSET recortarMsg3
 00000535  E8 00000000 E      C 	call WriteString
 0000053A  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 0000053F  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;copiarMsg4	BYTE "Digite a linha da celula para onde  deseja colar: ", 0
			      C 
 00000541  BA 0000093D R      C 	mov edx, OFFSET recortarMsg4
 00000546  E8 00000000 E      C 	call WriteString
 0000054B  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
 00000550  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000555  E8 000000AD	      C 	call EnderecoCelula
 0000055A  E8 00000140	      C 	call ColarCelula
			      C 
			      C 	;Recuperando Registradores
 0000055F  5B		      C 	pop ebx
 00000560  5A		      C 	pop edx
 00000561  58		      C 	pop eax
 00000562  5E		      C 	pop esi
			      C 
 00000563  C3		      C 	ret
 00000564		      C RecortarUser ENDP
			      C 
 00000564		      C SelecionaCelula PROC
			      C 	;Procedimento para imprimir a Barra de Formulas 
			      C 	;Mostrando assim a fórmula de uma determinada célula
			      C 
			      C 	;Guardando valores primitivos dos registradores
 00000564  50		      C 	push eax
 00000565  53		      C 	push ebx
 00000566  56		      C 	push esi
 00000567  52		      C 	push edx
			      C 
			      C 	;selecionarMsg1 BYTE "Digite a coluna da celula que deseja selecionar: ", 0
			      C 
 00000568  BA 0000096B R      C 	mov edx, OFFSET selecionarMsg1
 0000056D  E8 00000000 E      C 	call WriteString
 00000572  E8 00000000 E      C 	call ReadHex	 ; EAX = COLUNA
 00000577  8B D8	      C 	mov ebx, eax	 ; EBX recebe a COLUNA
			      C 
			      C 	;selecionarMsg2 BYTE "Digite a linha da celula que deseja selecionar: ", 0
			      C 
 00000579  BA 0000099D R      C 	mov edx, OFFSET selecionarMsg2
 0000057E  E8 00000000 E      C 	call WriteString
 00000583  E8 00000000 E      C 	call ReadHex	 ;EAX = LINHA
			      C 
 00000588  BE 00000000 R      C 	mov esi, OFFSET Linha1
 0000058D  E8 00000075	      C 	call EnderecoCelula
			      C 
			      C 	;selecionarMsg3 BYTE "Barra de formulas: ",0
			      C 	
 00000592  BA 000009CE R      C 	mov edx, OFFSET selecionarMsg3
 00000597  E8 00000000 E      C 	call Crlf
 0000059C  E8 00000000 E      C 	call WriteString
			      C 
 000005A1  8D 56 0E	      C 	lea edx,(CELL PTR[esi]).formula
 000005A4  E8 00000000 E      C 	call WriteString
 000005A9  E8 00000000 E      C 	call Crlf
			      C 
			      C 	;Recuperando valores
 000005AE  5A		      C 	pop edx
 000005AF  5E		      C 	pop esi
 000005B0  5B		      C 	pop ebx
 000005B1  58		      C 	pop eax
			      C 		
 000005B2  C3		      C 	ret
 000005B3		      C SelecionaCelula ENDP
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
				INCLUDE FuncionalidadesPlanilha.asm
			      C ;TITLE Planilha-Vintage-Funcionalidades(FelipeJoseBento)
			      C ;Arquivos com todas as funçoes relacionadas com manipulação de celulas
			      C 
			      C 
 000005B3		      C InserirCelula PROC
			      C 	 ; Procedimento para inserir um valor em uma célula
			      C 	 ; O usuário primeiramente digita a coluna que o valor seria inserido
			      C 	 ; em seguida digita a linha
			      C 	 ; Apos o usuário digita o tipo de valor que ele irá inserir (1->Inteiro , 2->String, 3->Fórmula)
			      C 	 ; RECEBE: Origem(Área de tranferencia ou Célula da Planilha) em EDI
			      C 	 ; RECEBE: Destino em ESI
			      C 	
			      C 	;Guardando valores dos registradores
 000005B3  56		      C 	push esi
 000005B4  51		      C 	push ecx
 000005B5  52		      C 	push edx
 000005B6  50		      C 	push eax
			      C 
			      C 	;Inserindo Valor
 000005B7  B8 00000000	      C 	mov eax, 0
 000005BC  8B 47 01	      C 	mov eax, (Cell  PTR[edi]).numInt
 000005BF  89 46 01	      C 	mov (Cell  PTR[esi]).numInt, eax  
 000005C2  B8 00000000	      C 	mov eax, 0
 000005C7  8A 07	      C 	mov al, (Cell  PTR[edi]).typ
 000005C9  88 06	      C 	mov (Cell  PTR[esi]).typ, al
 000005CB  B8 00000000	      C 	mov eax, 0
 000005D0  B9 00000008	      C 	mov ecx, tamTexto
 000005D5  8D 57 05	      C 	lea edx, (Cell  PTR[edi]).text
 000005D8  53		      C 	push ebx
 000005D9  8D 5E 05	      C 	lea ebx, (Cell  PTR[esi]).text
 000005DC		      C LoopInsere:
 000005DC  B8 00000000	      C 	mov eax, 0
 000005E1  8A 02	      C 	mov al, [edx]
 000005E3  88 03	      C 	mov [ebx], al
 000005E5  42		      C 	inc edx
 000005E6  43		      C 	inc ebx
 000005E7  E2 F3	      C 	loop LoopInsere 
 000005E9  B9 00000008	      C 	mov ecx, tamTexto
 000005EE  8D 57 0E	      C 	lea edx, (Cell  PTR[edi]).formula
 000005F1  8D 5E 0E	      C 	lea ebx, (Cell  PTR[esi]).formula
 000005F4		      C LoopInsere2:
 000005F4  B8 00000000	      C 	mov eax, 0
 000005F9  8A 02	      C 	mov al, [edx]
 000005FB  88 03	      C 	mov [ebx], al
 000005FD  42		      C 	inc edx
 000005FE  43		      C 	inc ebx
 000005FF  E2 F3	      C 	loop LoopInsere2
 00000601  5B		      C 	pop ebx
			      C 	
			      C 	;Recuperando Valores
 00000602  58		      C 	pop eax
 00000603  5A		      C 	pop edx
 00000604  59		      C 	pop ecx 
 00000605  5E		      C 	pop esi
			      C 
 00000606  C3		      C 	ret
			      C 	
 00000607		      C InserirCelula ENDP
			      C 
 00000607		      C EnderecoCelula PROC
			      C 	;Função que calcula a posição na mémoria em coloca o resultado em ESI
			      C 	;RECEBE: eax com a Linha da célula
			      C 	;RECEBE: ebx com a Coluna da célula
			      C 	;RECEBE: esi com o Início da TABELA
			      C 	;RETORNA: esi com o endereco da celula na memória
 00000607  53		      C 	push ebx
 00000608  52		      C 	push edx
 00000609  50		      C 	push eax
 0000060A  51		      C 	push ecx
			      C 
			      C 	;FORMULA PARA O ENDEREÇO DESTINO
			      C 	;Planilha[i, j] = offset Linha1 + (i * 5 *sizeof(Celula)) + (j * sizeof(Celula))
			      C 	;Tamanho da CELL é 23 bytes
			      C 	;Numero de coluna é 5
			      C 
 0000060B  48		      C 	dec eax		;Pois a memória começa na posição ZERO e não na posição 1
 0000060C  BA 00000005	      C 	mov edx, 5	
			      C 	;Multiplicando Linha*5
			      C 	;Pois quando pula uma linha
			      C 	;Na verdade pula 5 colunas
 00000611  F7 E2	      C 	mul edx		
 00000613  50		      C 	push eax	
 00000614  BA 00000000	      C 	mov edx, 0
 00000619  8B C3	      C 	mov eax, ebx
 0000061B  BB 0000000A	      C 	mov ebx, 0Ah
 00000620  F7 F3	      C 	div ebx
 00000622  8B DA	      C 	mov ebx, edx
 00000624  58		      C 	pop eax
			      C 
			      C 	;Calculo do Endereço da Célula
 00000625  BE 00000000 R      C 	mov esi, OFFSET Linha1
 0000062A  BA 00000000	      C 	mov edx, 0
 0000062F  B9 00000017	      C 	mov ecx, TYPE CELL
 00000634  F7 E1	      C 	mul ecx
 00000636  03 F0	      C 	add esi, eax
			      C 
 00000638  8B C3	      C 	mov eax, ebx
 0000063A  F7 E1	      C 	mul ecx
 0000063C  03 F0	      C 	add esi, eax
			      C 	
 0000063E  59		      C 	pop ecx
 0000063F  58		      C 	pop eax
 00000640  5A		      C 	pop edx
 00000641  5B		      C 	pop ebx
			      C 
 00000642  C3		      C 	ret
 00000643		      C EnderecoCelula ENDP
			      C 
 00000643		      C ExcluirCelula PROC
			      C 	;Função para excluir uma célula da planilha
			      C 	;RECEBE ESI com o endereco da celula a ser excluida
			      C 	;Após excluir, confirma a exclusão
 00000643  50		      C 	push eax
 00000644  52		      C 	push edx
 00000645  51		      C 	push ecx
			      C 
 00000646  8D 16	      C 	lea edx, (Cell  PTR[esi]).typ ; EDX endereço do tipo
 00000648  B8 00000000	      C 	mov eax, 0
 0000064D  3B 02	      C 	cmp eax, [edx]
 0000064F  74 35	      C 	je ExcluirFim
 00000651  40		      C 	inc eax
 00000652  3B 02	      C 	cmp eax, [edx]
 00000654  74 0A	      C 	je ExcluirInt
 00000656  40		      C 	inc eax
 00000657  3B 02	      C 	cmp eax, [edx]
 00000659  74 12	      C 	je ExcluirString
 0000065B  40		      C 	inc eax
 0000065C  3B 02	      C 	cmp eax, [edx]
 0000065E  74 24	      C 	je ExcluirFormula
			      C 
 00000660		      C ExcluirInt:
 00000660  C6 06 00	      C 	mov (Cell  PTR[esi]).typ, 0		;Célula Vazia
 00000663  B8 00000000	      C 	mov eax, 0
 00000668  89 46 01	      C 	mov (Cell  PTR[esi]).numInt, eax
 0000066B  EB 19	      C 	jmp ExcluirFim
			      C 
 0000066D		      C ExcluirString:
 0000066D  C6 06 00	      C 	mov (Cell  PTR[esi]).typ, 0		;Célula Vazia
 00000670  8D 56 05	      C 	lea edx, (Cell  PTR[esi]).text	;EDX endereço com o texto a ser apagado
 00000673  B9 00000008	      C 	mov ecx, tamTexto
			      C 
			      C 	;Colocando NULL na String da célula
			      C 
 00000678		      C ExluirStringAux:
 00000678  B8 00000000	      C 	mov eax,0
 0000067D  88 02	      C 	mov [edx], al
 0000067F  42		      C 	inc edx
 00000680  E2 F6	      C 	loop ExluirStringAux
 00000682  EB 02	      C 	jmp ExcluirFim
			      C 
 00000684		      C ExcluirFormula:
 00000684  EB 00	      C 	jmp ExcluirFim
			      C 
 00000686		      C ExcluirFim:
			      C 	;recuperando valores 
 00000686  59		      C 	pop ecx
 00000687  5A		      C 	pop edx
 00000688  58		      C 	pop eax
			      C 
 00000689  C3		      C 	ret
 0000068A		      C ExcluirCelula ENDP
			      C 
			      C 
			      C 
 0000068A		      C CopiarCelula PROC
			      C 	;Procedimento que copia uma célula para Area de Transferencia (CellAux Cell <>)
			      C 	;RECEBE: Endereco da celula a ser copiada em ESI
			      C 	
 0000068A  57		      C 	push edi
 0000068B  52		      C 	push edx
			      C 	
 0000068C  BA 000009E2 R      C 	mov edx, OFFSET areaTransferencia
 00000691  8B FE	      C 	mov edi, esi ;ORIGEM (Recebida em ESI)
 00000693  56		      C 	push esi
 00000694  8B F2	      C 	mov esi, edx ;DESTINO
			      C 
 00000696  E8 FFFFFF18	      C 	call InserirCelula
			      C 	;Recuperando valores 
 0000069B  5E		      C 	pop esi
 0000069C  5A		      C 	pop edx
 0000069D  5F		      C 	pop edi
			      C 	
 0000069E  C3		      C 	ret
 0000069F		      C CopiarCelula ENDP
			      C 
			      C 
			      C 
 0000069F		      C RecortarCelula PROC
			      C 	;Procedimento que cola uma célula da área de transferência para uma célula da planilha
			      C 	;RECEBE: Endereco de Destino em ESI
			      C 
 0000069F		      C RecortarCelula ENDP
			      C 
 0000069F		      C ColarCelula PROC
			      C 	;Procedimento que cola uma célula da área de transferência para uma célula da planilha
			      C 	;RECEBE: Endereco de Destino em ESI
 0000069F  57		      C 	push edi
			      C 
 000006A0  BF 000009E2 R      C 	mov edi, OFFSET areaTransferencia
 000006A5  E8 FFFFFF09	      C 	call InserirCelula
			      C 
 000006AA  5F		      C 	pop edi
 000006AB  C3		      C 	ret
 000006AC		      C ColarCelula ENDP
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
				INCLUDE ControladorPlanilha.asm 
			      C ;TITLE Planilha-Vintage-Controlador(FelipeJoseBento)
			      C ;Arquivo que controla as entradas do usuário e os procedimentos da InterfacePlanilha
			      C 
 000006AC		      C controladorPrincipal PROC 
			      C 	;Primeiro procedimento iniciado na aplicação 
 000006AC  50		      C 	push eax
 000006AD  53		      C 	push ebx
 000006AE  56		      C 	push esi
 000006AF		      C InicioControlador:
 000006AF  BE 00000000 R      C 	mov esi, OFFSET Linha1	;Temos aqui o início da Planilha
			      C 
 000006B4  E8 00000000 E      C 	call Clrscr
 000006B9  E8 FFFFF942	      C 	call ImprimePlanilha ;Imprime Planilha na tela
 000006BE  E8 FFFFFA4E	      C 	call ImprimeMenu	 ;Imprime Menu para o usuario(Retorna Opçao em EAX)
			      C 	; Opçoes do Menu
			      C 	; 1 - INSERIR VALOR EM UMA CELULA
			      C 	; 2 - DELETAR VALOR DE UMA UMA CELULA 
			      C 	; 3 - COPIAR VALOR DE UMA CÉLULA PARA OUTRA 
			      C 	; 4 - RECORTAR VALOR DE UMA CÉLULA PARA OUTRA 
			      C 	; 5 - SELECIONAR CELULA
			      C 	; 6 - DELETAR UMA COLUNA 
			      C 	; 7 - DELETAR UMA LINHA
			      C 
			      C 	;Vendo a opçao selecionada
 000006C3  BB 00000001	      C 	mov ebx,1
 000006C8  3B D8	      C 	cmp ebx, eax
 000006CA  74 45	      C 	je controladorInsere
 000006CC  43		      C 	inc ebx
			      C 	
 000006CD  3B D8	      C 	cmp ebx, eax
 000006CF  74 5E	      C 	je controladorDeleta
 000006D1  43		      C 	inc ebx
			      C 
 000006D2  3B D8	      C 	cmp ebx, eax
 000006D4  74 77	      C 	je controladorCopia
 000006D6  43		      C 	inc ebx
			      C 
 000006D7  3B D8	      C 	cmp ebx, eax
 000006D9  0F 84 0000008C     C 	je controladorRecorta
 000006DF  43		      C 	inc ebx
			      C 
 000006E0  3B D8	      C 	cmp ebx, eax
 000006E2  0F 84 000000A1     C 	je controladorSelecionaCelula
 000006E8  43		      C 	inc ebx
			      C 
 000006E9  3B D8	      C 	cmp ebx, eax
 000006EB  0F 84 000000BD     C 	je controladorFuncaoMaior
 000006F1  43		      C 	inc ebx
			      C 
 000006F2  3B D8	      C 	cmp ebx, eax
 000006F4  0F 84 000000CF     C 	je controladorFuncaoMenor
 000006FA  43		      C 	inc ebx
			      C 
 000006FB  3B D8	      C 	cmp ebx, eax
 000006FD  0F 84 000000E1     C 	je controladorcNum
 00000703  43		      C 	inc ebx
			      C 
 00000704  3B D8	      C 	cmp ebx, eax
 00000706  0F 84 000000F3     C 	je controladorCopiaFormula
			      C 	
 0000070C  E9 00000109	      C 	jmp FimControlador
			      C 
			      C ;1
 00000711		      C controladorInsere:
 00000711  E8 00000000 E      C 	call Clrscr
 00000716  E8 FFFFF8E5	      C 	call ImprimePlanilha
 0000071B  E8 00000000 E      C 	call Crlf
 00000720  E8 00000000 E      C 	call Crlf
 00000725  E8 FFFFFBE2	      C 	call InserirUser
 0000072A  E9 000000EB	      C 	jmp FimControlador
			      C 
			      C ;2
 0000072F		      C controladorDeleta:
 0000072F  E8 00000000 E      C 	call Clrscr
 00000734  E8 FFFFF8C7	      C 	call ImprimePlanilha
 00000739  E8 00000000 E      C 	call Crlf
 0000073E  E8 00000000 E      C 	call Crlf
 00000743  E8 FFFFFC87	      C 	call ExcluirUser
 00000748  E9 000000CD	      C 	jmp FimControlador
			      C 
			      C ;3
 0000074D		      C controladorCopia:
 0000074D  E8 00000000 E      C 	call Clrscr
 00000752  E8 FFFFF8A9	      C 	call ImprimePlanilha
 00000757  E8 00000000 E      C 	call Crlf
 0000075C  E8 00000000 E      C 	call Crlf
 00000761  E8 FFFFFC9E	      C 	call CopiarUser
 00000766  E9 000000AF	      C 	jmp FimControlador
			      C 
			      C ;4
 0000076B		      C controladorRecorta:
 0000076B  E8 00000000 E      C 	call Clrscr
 00000770  E8 FFFFF88B	      C 	call ImprimePlanilha
 00000775  E8 00000000 E      C 	call Crlf
 0000077A  E8 00000000 E      C 	call Crlf
 0000077F  E8 FFFFFD6F	      C 	call RecortarUser
 00000784  E9 00000091	      C 	jmp FimControlador
			      C 
			      C ;5
 00000789		      C controladorSelecionaCelula:
 00000789  E8 00000000 E      C 	call Clrscr
 0000078E  E8 FFFFF86D	      C 	call ImprimePlanilha
 00000793  E8 00000000 E      C 	call Crlf
 00000798  E8 00000000 E      C 	call Crlf
 0000079D  E8 FFFFFDC2	      C 	call SelecionaCelula
 000007A2  E8 00000000 E      C 	call Crlf
 000007A7  E8 00000000 E      C 	call WaitMsg
 000007AC  EB 6C	      C 	jmp FimControlador
			      C 
			      C ;6
 000007AE		      C controladorFuncaoMaior:
 000007AE  E8 00000000 E      C 	call Clrscr
 000007B3  E8 FFFFF848	      C 	call ImprimePlanilha
 000007B8  E8 00000000 E      C 	call Crlf
 000007BD  E8 00000000 E      C 	call Crlf
 000007C2  E8 FFFFFA95	      C 	call MaiorUser
 000007C7  EB 51	      C 	jmp FimControlador
			      C 
			      C ;7
 000007C9		      C controladorFuncaoMenor:
 000007C9  E8 00000000 E      C 	call Clrscr
 000007CE  E8 FFFFF82D	      C 	call ImprimePlanilha
 000007D3  E8 00000000 E      C 	call Crlf
 000007D8  E8 00000000 E      C 	call Crlf
 000007DD  E8 FFFFFA22	      C 	call MenorUser
 000007E2  EB 36	      C 	jmp FimControlador
			      C 
			      C ;8
 000007E4		      C controladorcNum:
 000007E4  E8 00000000 E      C 	call Clrscr
 000007E9  E8 FFFFF812	      C 	call ImprimePlanilha
 000007EE  E8 00000000 E      C 	call Crlf
 000007F3  E8 00000000 E      C 	call Crlf
 000007F8  E8 FFFFFAB7	      C 	call ContNumUser
 000007FD  EB 1B	      C 	jmp FimControlador
			      C 
			      C ;9
 000007FF		      C controladorCopiaFormula:
 000007FF  E8 00000000 E      C 	call Clrscr
 00000804  E8 FFFFF7F7	      C 	call ImprimePlanilha
 00000809  E8 00000000 E      C 	call Crlf
 0000080E  E8 00000000 E      C 	call Crlf
 00000813  E8 FFFFFC58	      C 	call CopiaFormulaUser
 00000818  EB 00	      C 	jmp FimControlador
			      C 
 0000081A		      C FimControlador:
 0000081A  E9 FFFFFE90	      C 	jmp InicioControlador
 0000081F  5E		      C 	pop esi
 00000820  5B		      C 	pop ebx
 00000821  58		      C 	pop eax
 00000822  C3		      C 	ret
 00000823		      C controladorPrincipal ENDP
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
				INCLUDE ControladorFormulas.asm
			      C ;TITLE Planilha-Vintage-ControladorFormulas(FelipeJoseBento)
			      C ;Arquivo que controla as formulas utilizadas pelo usuário
			      C 
 00000823		      C controladorFormula PROC
			      C 	;Procedimento para verificar a formula inserida pelo usuário
			      C 	;Atualiza a planilha
			      C 	;RECEBE: Endereço da CELULA que contem a formula em EDI
			      C 	;FORMULAS SÃO DO TIPO: =XN*XN ,
			      C 	; onde X é uma coluna 
			      C 	; onde N é uma linha
			      C 	; onde * é um operador que pode ser (* , + , - ) 
			      C 	
			      C 	;Guardando valores dos registradores
 00000823  52		      C 	push edx
 00000824  56		      C 	push esi
 00000825  50		      C 	push eax
 00000826  53		      C 	push ebx
 00000827  51		      C 	push ecx
			      C 
 00000828  8D 57 0E	      C 	lea edx, (Cell  PTR[edi]).formula
			      C 	
			      C 
			      C 	;VERIFICANDO SE É UMA FUNCAO
			      C 	;MA-> MAIOR
			      C 	;CN -> Cont.Numero
			      C 	
 0000082B  60		      C 	pushad 
 0000082C  57		      C 	push edi
			      C 
			      C 	;FUNCAO
 0000082D  BB 00000000	      C 	mov ebx, 0
 00000832  8A 1A	      C 	mov bl, [edx]
 00000834  83 FB 4D	      C 	cmp ebx, 4Dh
 00000837  74 13	      C 	je MAIOR
 00000839  83 FB 4E	      C 	cmp ebx, 4Eh
 0000083C  74 73	      C 	je MENOR
 0000083E  83 FB 43	      C 	cmp ebx, 043h
 00000841  0F 84 0000011D     C 	je CONT
			      C 	
			      C 
			      C 	;FORMULA
 00000847  E9 0000018B	      C 	jmp FORMULA
			      C 
 0000084C		      C MAIOR:
 0000084C  BB 00000000	      C 	mov ebx, 0
 00000851  8A 5A 02	      C 	mov bl, [edx+2] ; Coluna do primeiro membro
 00000854  80 EB 37	      C 	sub bl, 37h
 00000857  B8 00000000	      C 	mov eax, 0
 0000085C  8A 42 03	      C 	mov al, [edx+3] ; Linha do primeiro membro
 0000085F  2C 30	      C 	sub al, 30h
			      C 
 00000861  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000866  E8 FFFFFD9C	      C 	call EnderecoCelula
			      C 	
			      C 	;EDI ENDERECO CELULA INICIAL
 0000086B  8B FE	      C 	mov edi, esi
			      C 	
			      C 	;CONTADOR INICIAL ECX
 0000086D  8D 76 01	      C 	lea esi, (Cell  PTR[esi]).numInt
 00000870  8B 0E	      C 	mov ecx, [esi]
			      C 
 00000872  BB 00000000	      C 	mov ebx, 0
 00000877  8A 5A 05	      C 	mov bl, [edx+5] ; Coluna do segundo membro
 0000087A  80 EB 37	      C 	sub bl, 37h
 0000087D  B8 00000000	      C 	mov eax, 0
 00000882  8A 42 06	      C 	mov al, [edx+6] ; Linha do segundo membro
 00000885  2C 30	      C 	sub al, 30h
			      C 
 00000887  BE 00000000 R      C 	mov esi, OFFSET Linha1
			      C 	;ESI COM ENDERECO DO FIM
 0000088C  E8 FFFFFD76	      C 	call EnderecoCelula
			      C 	
 00000891  8B D7	      C 	mov edx, edi
			      C 	;EDX INICIO
			      C 	;ESI FIM
 00000893  3B D6	      C L1:	cmp edx, esi
 00000895  74 10	      C 	je FL1
 00000897  83 C2 73	      C 	add edx, (TYPE CELL)*5		;Novo endereco da célula
 0000089A  8D 5A 01	      C 	lea ebx, (Cell  PTR[edx]).numInt
 0000089D  8B 03	      C 	mov eax, [ebx]
 0000089F  3B C8	      C 	cmp ecx, eax
 000008A1  77 02	      C 	ja T1 
 000008A3  8B C8	      C 	mov ecx, eax
 000008A5		      C T1:
 000008A5  EB EC	      C 	jmp L1
 000008A7		      C FL1:
 000008A7  5F		      C 	pop edi
 000008A8  89 4F 01	      C 	mov (Cell  PTR[edi]).numInt, ecx
 000008AB  61		      C 	popad
 000008AC  E9 000001C6	      C 	jmp S1
			      C 
 000008B1		      C MENOR:
 000008B1  BB 00000000	      C 	mov ebx, 0
 000008B6  8A 5A 02	      C 	mov bl, [edx+2] ; Coluna do primeiro membro
 000008B9  80 EB 37	      C 	sub bl, 37h
 000008BC  B8 00000000	      C 	mov eax, 0
 000008C1  8A 42 03	      C 	mov al, [edx+3] ; Linha do primeiro membro
 000008C4  2C 30	      C 	sub al, 30h
			      C 
 000008C6  BE 00000000 R      C 	mov esi, OFFSET Linha1
 000008CB  E8 FFFFFD37	      C 	call EnderecoCelula
			      C 	
			      C 	;EDI ENDERECO CELULA INICIAL
 000008D0  8B FE	      C 	mov edi, esi
			      C 	
			      C 	;CONTADOR INICIAL ECX
 000008D2  8D 76 01	      C 	lea esi, (Cell  PTR[esi]).numInt
 000008D5  8B 0E	      C 	mov ecx, [esi]
			      C 
 000008D7  BB 00000000	      C 	mov ebx, 0
 000008DC  8A 5A 05	      C 	mov bl, [edx+5] ; Coluna do segundo membro
 000008DF  80 EB 37	      C 	sub bl, 37h
 000008E2  B8 00000000	      C 	mov eax, 0
 000008E7  8A 42 06	      C 	mov al, [edx+6] ; Linha do segundo membro
 000008EA  2C 30	      C 	sub al, 30h
			      C 
 000008EC  BE 00000000 R      C 	mov esi, OFFSET Linha1
			      C 	;ESI COM ENDERECO DO FIM
 000008F1  E8 FFFFFD11	      C 	call EnderecoCelula
			      C 	
 000008F6  8B D7	      C 	mov edx, edi
			      C 	;EDX INICIO
			      C 	;ESI FIM
 000008F8  52		      C 	push edx
 000008F9		      C VERIFICA:
 000008F9  8D 02	      C 	lea eax, (Cell  PTR[edx]).typ
 000008FB  BB 00000000	      C 	mov ebx, 0
 00000900  8A 18	      C 	mov bl, [eax]
 00000902  83 FB 00	      C 	cmp ebx, 0
 00000905  75 09	      C 	jne INI
 00000907  3B D6	      C 	cmp edx, esi
 00000909  74 40	      C 	je NT
 0000090B  83 C2 73	      C 	add edx, (TYPE CELL)*5		;Novo endereco da célula
 0000090E  EB E9	      C 	jmp VERIFICA
 00000910		      C INI:
 00000910  8D 5A 01	      C 	lea ebx, (Cell  PTR[edx]).numInt
 00000913  8B 0B	      C 	mov ecx, [ebx]
 00000915  5A		      C 	pop edx
 00000916		      C INI2:
 00000916  BB 00000000	      C 	mov ebx, 0
 0000091B  8D 02	      C 	lea eax, (Cell  PTR[edx]).typ
 0000091D  BB 00000000	      C 	mov ebx, 0
 00000922  8A 18	      C 	mov bl, [eax]
 00000924  83 FB 00	      C 	cmp ebx, 0
 00000927  74 19	      C 	je COMP
 00000929  8D 42 01	      C 	lea eax, (Cell  PTR[edx]).numInt
 0000092C  BB 00000000	      C 	mov ebx, 0
 00000931  8B 18	      C 	mov ebx, [eax]
 00000933  3B CB	      C 	cmp ecx, ebx
 00000935  76 0B	      C 	jna COMP
 00000937  8B CB	      C 	mov ecx, ebx
 00000939  3B D6	      C 	cmp edx, esi
 0000093B  74 1D	      C 	je SALVA
 0000093D  83 C2 73	      C 	add edx, (TYPE CELL)*5	
 00000940  EB D4	      C 	jmp INI2
			      C 
 00000942		      C COMP:
 00000942  3B D6	      C 	cmp edx, esi
 00000944  74 14	      C 	je SALVA
 00000946  83 C2 73	      C 	add edx, (TYPE CELL)*5	
 00000949  EB CB	      C 	jmp INI2
			      C 
 0000094B		      C NT:
 0000094B  5A		      C 	pop edx
 0000094C  5F		      C 	pop edi
 0000094D  C7 47 01	      C 	mov (Cell  PTR[edi]).numInt, 0
	   00000000
 00000954  61		      C 	popad
 00000955  E9 0000011D	      C 	jmp S1
			      C 
 0000095A		      C SALVA:
 0000095A  5F		      C 	pop edi
 0000095B  89 4F 01	      C 	mov (Cell  PTR[edi]).numInt, ecx
 0000095E  61		      C 	popad
 0000095F  E9 00000113	      C 	jmp S1
			      C 
			      C ;;CONT.NUM
 00000964		      C 	CONT: 
 00000964  BB 00000000	      C 	mov ebx, 0
 00000969  8A 5A 02	      C 	mov bl, [edx+2] ; Coluna do primeiro membro
 0000096C  80 EB 37	      C 	sub bl, 37h
 0000096F  B8 00000000	      C 	mov eax, 0
 00000974  8A 42 03	      C 	mov al, [edx+3] ; Linha do primeiro membro
 00000977  2C 30	      C 	sub al, 30h
			      C 
 00000979  BE 00000000 R      C 	mov esi, OFFSET Linha1
 0000097E  E8 FFFFFC84	      C 	call EnderecoCelula
			      C 	
			      C 	;EDI ENDERECO CELULA INICIAL
 00000983  8B FE	      C 	mov edi, esi
			      C 	
			      C 	;CONTADOR INICIAL ECX
 00000985  8D 76 01	      C 	lea esi, (Cell  PTR[esi]).numInt
 00000988  8B 0E	      C 	mov ecx, [esi]
			      C 
 0000098A  BB 00000000	      C 	mov ebx, 0
 0000098F  8A 5A 05	      C 	mov bl, [edx+5] ; Coluna do segundo membro
 00000992  80 EB 37	      C 	sub bl, 37h
 00000995  B8 00000000	      C 	mov eax, 0
 0000099A  8A 42 06	      C 	mov al, [edx+6] ; Linha do segundo membro
 0000099D  2C 30	      C 	sub al, 30h
			      C 
 0000099F  BE 00000000 R      C 	mov esi, OFFSET Linha1
			      C 	;ESI COM ENDERECO DO FIM
 000009A4  E8 FFFFFC5E	      C 	call EnderecoCelula
			      C 	
 000009A9  8B D7	      C 	mov edx, edi
			      C 	;EDX INICIO
			      C 	;ESI FIM
 000009AB  B9 00000000	      C 	mov ecx, 0
 000009B0		      C CONT1:
 000009B0  8D 1A	      C 	lea ebx, (Cell  PTR[edx]).typ
 000009B2  B8 00000000	      C 	mov eax, 0
 000009B7  8A 03	      C 	mov al, [ebx]
			      C 
 000009B9  3C 01	      C 	cmp al, 1
 000009BB  74 06	      C 	je INCR
 000009BD  3C 03	      C 	cmp al, 3
 000009BF  74 02	      C 	je INCR
 000009C1  EB 01	      C 	jmp SALT
 000009C3		      C INCR:
 000009C3  41		      C 	inc ecx
 000009C4		      C SALT:
 000009C4  3B F2	      C 	cmp esi, edx
 000009C6  74 05	      C 	je FIMC
 000009C8  83 C2 73	      C 	add edx, (TYPE CELL)*5	
 000009CB  EB E3	      C 	jmp CONT1
 000009CD		      C FIMC:	
			      C 	;;FIM
 000009CD  5F		      C 	pop edi
 000009CE  89 4F 01	      C 	mov (Cell  PTR[edi]).numInt, ecx
 000009D1  61		      C 	popad
 000009D2  E9 000000A0	      C 	jmp S1
			      C 
			      C ;;CONT.NUM
			      C 	
 000009D7		      C FORMULA:
 000009D7  5F		      C 	pop edi
 000009D8  61		      C 	popad
 000009D9  BB 00000000	      C 	mov ebx, 0
 000009DE  8A 5A 01	      C 	mov bl, [edx+1] ; Coluna do primeiro membro
 000009E1  80 EB 37	      C 	sub bl, 37h
 000009E4  B8 00000000	      C 	mov eax, 0
 000009E9  8A 42 02	      C 	mov al, [edx+2] ; Linha do primeiro membro
 000009EC  2C 30	      C 	sub al, 30h
			      C 
 000009EE  BE 00000000 R      C 	mov esi, OFFSET Linha1
 000009F3  E8 FFFFFC0F	      C 	call EnderecoCelula
			      C 
 000009F8  8D 76 01	      C 	lea esi, (Cell  PTR[esi]).numInt
 000009FB  FF 36	      C 	push [esi]		; Operando 1 na pilha
			      C 
 000009FD  BB 00000000	      C 	mov ebx, 0
 00000A02  8A 5A 04	      C 	mov bl, [edx+4] ; Coluna do primeiro membro
 00000A05  80 EB 37	      C 	sub bl, 37h
 00000A08  B8 00000000	      C 	mov eax, 0
 00000A0D  8A 42 05	      C 	mov al, [edx+5] ; Linha do primeiro membro
 00000A10  2C 30	      C 	sub al, 30h
			      C 
 00000A12  BE 00000000 R      C 	mov esi, OFFSET Linha1
 00000A17  E8 FFFFFBEB	      C 	call EnderecoCelula
			      C 
 00000A1C  8D 76 01	      C 	lea esi, (Cell  PTR[esi]).numInt
 00000A1F  FF 36	      C 	push [esi]		; Operando 2 na pilha
			      C 
			      C 	;;FORMULA 
 00000A21  B8 00000000	      C 	mov eax, 0
 00000A26  8A 42 02	      C 	mov al, [edx+2] ;OPERADOR
			      C 
 00000A29  5B		      C 	pop ebx ; -> Primeiro da Formula
 00000A2A  58		      C 	pop eax ; -> Segunda da Formula
			      C 
			      C 	;Verificando qual operação será feita
 00000A2B  B9 00000000	      C 	mov ecx, 0
 00000A30  8A 4A 03	      C 	mov cl, [edx+3] ; OPERADOR
 00000A33  80 F9 2A	      C 	cmp cl, 2Ah
 00000A36  74 11	      C 	je MULTI
 00000A38  80 F9 2B	      C 	cmp  cl, 2Bh
 00000A3B  74 24	      C 	je SOMA
 00000A3D  80 F9 2F	      C 	cmp cl, 2Fh
 00000A40  74 0E	      C 	je DIVISAO
 00000A42  80 F9 2D	      C 	cmp cl, 2Dh
 00000A45  74 21	      C 	je SUBE
 00000A47  EB 26	      C 	jmp NOPE
 00000A49		      C MULTI:
 00000A49  F7 E3	      C 	mul ebx
 00000A4B  89 47 01	      C 	mov (Cell  PTR[edi]).numInt, eax
 00000A4E  EB 27	      C 	jmp S1
 00000A50		      C DIVISAO:
 00000A50  83 FB 00	      C 	cmp ebx, 0
 00000A53  74 1A	      C 	je NOPE
 00000A55  BA 00000000	      C 	mov edx, 0
 00000A5A  F7 F3	      C 	div ebx
 00000A5C  89 47 01	      C 	mov (Cell  PTR[edi]).numInt, eax
 00000A5F  EB 16	      C 	jmp S1
 00000A61		      C SOMA:
 00000A61  03 C3	      C 	add eax, ebx
 00000A63  89 47 01	      C 	mov (Cell  PTR[edi]).numInt, eax
 00000A66  EB 0F	      C 	jmp S1
 00000A68		      C SUBE:
 00000A68  2B C3	      C 	sub eax, ebx
 00000A6A  89 47 01	      C 	mov (Cell  PTR[edi]).numInt, eax
 00000A6D  EB 08	      C 	jmp S1
 00000A6F		      C NOPE:
 00000A6F  B8 00000000	      C 	mov eax, 0
 00000A74  89 47 01	      C 	mov (Cell  PTR[edi]).numInt, eax
 00000A77		      C S1:
			      C 	;Recuperando valroes dos registradores
 00000A77  59		      C 	pop ecx
 00000A78  5B		      C 	pop ebx
 00000A79  58		      C 	pop eax
 00000A7A  5E		      C 	pop esi
 00000A7B  5A		      C 	pop edx
			      C 
 00000A7C  C3		      C 	ret
 00000A7D		      C controladorFormula ENDP
			      C 
				 
 00000A7D			main PROC
					 
 00000A7D  E8 FFFFFC2A			call controladorPrincipal  
					
					exit
 00000A89			main ENDP

				END main    
Microsoft (R) Macro Assembler Version 12.00.30501.0	    08/22/16 11:41:03
!Planilha-Vintage(FelipeJoseBento			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Cell . . . . . . . . . . . . . .	 00000017
  typ  . . . . . . . . . . . . .	 00000000	 Byte
  numInt . . . . . . . . . . . .	 00000001	 DWord
  text . . . . . . . . . . . . .	 00000005	 Byte
  formula  . . . . . . . . . . .	 0000000E	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000009FD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A89 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CentralizaCelula . . . . . . . .	P Near	 00000103 _TEXT	Length= 0000000E Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ColarCelula  . . . . . . . . . .	P Near	 0000069F _TEXT	Length= 0000000D Public STDCALL
ContNumUser  . . . . . . . . . .	P Near	 000002B4 _TEXT	Length= 00000058 Public STDCALL
CopiaFormulaUser . . . . . . . .	P Near	 00000470 _TEXT	Length= 00000083 Public STDCALL
CopiarCelula . . . . . . . . . .	P Near	 0000068A _TEXT	Length= 00000015 Public STDCALL
CopiarUser . . . . . . . . . . .	P Near	 00000404 _TEXT	Length= 0000006C Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnderecoCelula . . . . . . . . .	P Near	 00000607 _TEXT	Length= 0000003C Public STDCALL
ExcluirCelula  . . . . . . . . .	P Near	 00000643 _TEXT	Length= 00000047 Public STDCALL
  ExcluirInt . . . . . . . . . .	L Near	 00000660 _TEXT	
  ExcluirString  . . . . . . . .	L Near	 0000066D _TEXT	
  ExluirStringAux  . . . . . . .	L Near	 00000678 _TEXT	
  ExcluirFormula . . . . . . . .	L Near	 00000684 _TEXT	
  ExcluirFim . . . . . . . . . .	L Near	 00000686 _TEXT	
ExcluirUser  . . . . . . . . . .	P Near	 000003CF _TEXT	Length= 00000035 Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ImprimeCelula  . . . . . . . . .	P Near	 00000088 _TEXT	Length= 0000007B Public STDCALL
  CELLVAZIA  . . . . . . . . . .	L Near	 000000AA _TEXT	
  CVaux  . . . . . . . . . . . .	L Near	 000000B6 _TEXT	
  CELLINT  . . . . . . . . . . .	L Near	 000000BF _TEXT	
  CELLTEXT . . . . . . . . . . .	L Near	 000000CB _TEXT	
  CTaux  . . . . . . . . . . . .	L Near	 000000DA _TEXT	
  CELLFORMULA  . . . . . . . . .	L Near	 000000EC _TEXT	
  FIMIC  . . . . . . . . . . . .	L Near	 000000FF _TEXT	
ImprimeMenu  . . . . . . . . . .	P Near	 00000111 _TEXT	Length= 000000F3 Public STDCALL
  LeituraOpMenu  . . . . . . . .	L Near	 000001BC _TEXT	
  EntradaInvalida  . . . . . . .	L Near	 000001F5 _TEXT	
  EntradaValida  . . . . . . . .	L Near	 00000201 _TEXT	
ImprimePlanilha  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000088 Public STDCALL
  COLUNAS  . . . . . . . . . . .	L Near	 0000001D _TEXT	
  LINHA  . . . . . . . . . . . .	L Near	 00000048 _TEXT	
  PLINHA . . . . . . . . . . . .	L Near	 0000006A _TEXT	
  PCOLUNA  . . . . . . . . . . .	L Near	 00000073 _TEXT	
InserirCelula  . . . . . . . . .	P Near	 000005B3 _TEXT	Length= 00000054 Public STDCALL
  LoopInsere . . . . . . . . . .	L Near	 000005DC _TEXT	
  LoopInsere2  . . . . . . . . .	L Near	 000005F4 _TEXT	
InserirUser  . . . . . . . . . .	P Near	 0000030C _TEXT	Length= 000000C3 Public STDCALL
  InsereUserInt  . . . . . . . .	L Near	 00000366 _TEXT	
  InsereUserString . . . . . . .	L Near	 0000037F _TEXT	
  InsereUserFormula  . . . . . .	L Near	 0000039B _TEXT	
  FimUserInsere  . . . . . . . .	L Near	 000003BC _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MaiorUser  . . . . . . . . . . .	P Near	 0000025C _TEXT	Length= 00000058 Public STDCALL
MenorUser  . . . . . . . . . . .	P Near	 00000204 _TEXT	Length= 00000058 Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RecortarCelula . . . . . . . . .	P Near	 0000069F _TEXT	Length= 00000000 Public STDCALL
RecortarUser . . . . . . . . . .	P Near	 000004F3 _TEXT	Length= 00000071 Public STDCALL
SelecionaCelula  . . . . . . . .	P Near	 00000564 _TEXT	Length= 0000004F Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
controladorFormula . . . . . . .	P Near	 00000823 _TEXT	Length= 0000025A Public STDCALL
  MAIOR  . . . . . . . . . . . .	L Near	 0000084C _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000893 _TEXT	
  T1 . . . . . . . . . . . . . .	L Near	 000008A5 _TEXT	
  FL1  . . . . . . . . . . . . .	L Near	 000008A7 _TEXT	
  MENOR  . . . . . . . . . . . .	L Near	 000008B1 _TEXT	
  VERIFICA . . . . . . . . . . .	L Near	 000008F9 _TEXT	
  INI  . . . . . . . . . . . . .	L Near	 00000910 _TEXT	
  INI2 . . . . . . . . . . . . .	L Near	 00000916 _TEXT	
  COMP . . . . . . . . . . . . .	L Near	 00000942 _TEXT	
  NT . . . . . . . . . . . . . .	L Near	 0000094B _TEXT	
  SALVA  . . . . . . . . . . . .	L Near	 0000095A _TEXT	
  CONT . . . . . . . . . . . . .	L Near	 00000964 _TEXT	
  CONT1  . . . . . . . . . . . .	L Near	 000009B0 _TEXT	
  INCR . . . . . . . . . . . . .	L Near	 000009C3 _TEXT	
  SALT . . . . . . . . . . . . .	L Near	 000009C4 _TEXT	
  FIMC . . . . . . . . . . . . .	L Near	 000009CD _TEXT	
  FORMULA  . . . . . . . . . . .	L Near	 000009D7 _TEXT	
  MULTI  . . . . . . . . . . . .	L Near	 00000A49 _TEXT	
  DIVISAO  . . . . . . . . . . .	L Near	 00000A50 _TEXT	
  SOMA . . . . . . . . . . . . .	L Near	 00000A61 _TEXT	
  SUBE . . . . . . . . . . . . .	L Near	 00000A68 _TEXT	
  NOPE . . . . . . . . . . . . .	L Near	 00000A6F _TEXT	
  S1 . . . . . . . . . . . . . .	L Near	 00000A77 _TEXT	
controladorPrincipal . . . . . .	P Near	 000006AC _TEXT	Length= 00000177 Public STDCALL
  InicioControlador  . . . . . .	L Near	 000006AF _TEXT	
  controladorInsere  . . . . . .	L Near	 00000711 _TEXT	
  controladorDeleta  . . . . . .	L Near	 0000072F _TEXT	
  controladorCopia . . . . . . .	L Near	 0000074D _TEXT	
  controladorRecorta . . . . . .	L Near	 0000076B _TEXT	
  controladorSelecionaCelula . .	L Near	 00000789 _TEXT	
  controladorFuncaoMaior . . . .	L Near	 000007AE _TEXT	
  controladorFuncaoMenor . . . .	L Near	 000007C9 _TEXT	
  controladorcNum  . . . . . . .	L Near	 000007E4 _TEXT	
  controladorCopiaFormula  . . .	L Near	 000007FF _TEXT	
  FimControlador . . . . . . . .	L Near	 0000081A _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000A7D _TEXT	Length= 0000000C Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Linha1 . . . . . . . . . . . . .	Cell	 00000000 _DATA	
Linha2 . . . . . . . . . . . . .	Cell	 00000073 _DATA	
Linha3 . . . . . . . . . . . . .	Cell	 000000E6 _DATA	
Linha4 . . . . . . . . . . . . .	Cell	 00000159 _DATA	
Linha5 . . . . . . . . . . . . .	Cell	 000001CC _DATA	
Linha6 . . . . . . . . . . . . .	Cell	 0000023F _DATA	
Linha7 . . . . . . . . . . . . .	Cell	 000002B2 _DATA	
Linha8 . . . . . . . . . . . . .	Cell	 00000325 _DATA	
Linha9 . . . . . . . . . . . . .	Cell	 00000398 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TotalColunas . . . . . . . . . .	Number	 00000005h   
TotalLinhas  . . . . . . . . . .	Number	 0000000Bh   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
areaTransferencia  . . . . . . .	Cell	 000009E2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
copiarMsg1 . . . . . . . . . . .	Byte	 000007EF _DATA	
copiarMsg2 . . . . . . . . . . .	Byte	 0000081D _DATA	
copiarMsg3 . . . . . . . . . . .	Byte	 0000084A _DATA	
copiarMsg4 . . . . . . . . . . .	Byte	 0000087D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
excluirMsg1  . . . . . . . . . .	Byte	 00000775 _DATA	
excluirMsg2  . . . . . . . . . .	Byte	 000007A4 _DATA	
excluirMsg3  . . . . . . . . . .	Byte	 000007D2 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
formulaEntrada . . . . . . . . .	DWord	 000009F9 _DATA	
funcaoMsg1 . . . . . . . . . . .	Byte	 00000716 _DATA	
funcaoMsg2 . . . . . . . . . . .	Byte	 00000744 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inserirMsg10 . . . . . . . . . .	Byte	 000006AA _DATA	
inserirMsg11 . . . . . . . . . .	Byte	 000006E4 _DATA	
inserirMsg1  . . . . . . . . . .	Byte	 00000578 _DATA	
inserirMsg2  . . . . . . . . . .	Byte	 000005A1 _DATA	
inserirMsg3  . . . . . . . . . .	Byte	 000005C9 _DATA	
inserirMsg5  . . . . . . . . . .	Byte	 00000603 _DATA	
inserirMsg6  . . . . . . . . . .	Byte	 00000616 _DATA	
inserirMsg7  . . . . . . . . . .	Byte	 00000629 _DATA	
inserirMsg8  . . . . . . . . . .	Byte	 0000064F _DATA	
inserirMsg9  . . . . . . . . . .	Byte	 00000670 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuMsg1 . . . . . . . . . . . .	Byte	 00000536 _DATA	
menuMsgErro  . . . . . . . . . .	Byte	 00000549 _DATA	
menuOp1  . . . . . . . . . . . .	Byte	 00000422 _DATA	
menuOp2  . . . . . . . . . . . .	Byte	 0000044E _DATA	
menuOp3  . . . . . . . . . . . .	Byte	 00000473 _DATA	
menuOp4  . . . . . . . . . . . .	Byte	 0000049E _DATA	
menuOp5  . . . . . . . . . . . .	Byte	 000004CC _DATA	
menuOp6  . . . . . . . . . . . .	Byte	 000004E7 _DATA	
menuOp7  . . . . . . . . . . . .	Byte	 000004F9 _DATA	
menuOp8  . . . . . . . . . . . .	Byte	 0000050B _DATA	
menuOp9  . . . . . . . . . . . .	Byte	 00000520 _DATA	
menu . . . . . . . . . . . . . .	Byte	 0000040B _DATA	
recortarMsg1 . . . . . . . . . .	Byte	 000008B0 _DATA	
recortarMsg2 . . . . . . . . . .	Byte	 000008E0 _DATA	
recortarMsg3 . . . . . . . . . .	Byte	 0000090F _DATA	
recortarMsg4 . . . . . . . . . .	Byte	 0000093D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
selecionarMsg1 . . . . . . . . .	Byte	 0000096B _DATA	
selecionarMsg2 . . . . . . . . .	Byte	 0000099D _DATA	
selecionarMsg3 . . . . . . . . .	Byte	 000009CE _DATA	
tamTexto . . . . . . . . . . . .	Number	 00000008h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
